#include <hmg.ch>

#define DBI_QUERY             1001
#define RDDI_CONNECT          1001
#define RDDI_DISCONNECT       1002
#define RDDI_EXECUTE          1003
#define RDDI_ERROR            1004
#define RDDI_ERRORNO          1005
#define RDDI_NEWID            1006
#define RDDI_AFFECTEDROWS     1007
#define RDDI_QUERY            1008

REQUEST SDDMY, SQLMIX


REQUEST HB_LANG_PT
REQUEST HB_CODEPAGE_PT850



FUNCTION Main

   PRIVATE cServer := "localhost"
   PRIVATE cUserDb := "root"
   PRIVATE cPassDb := "root"

   PRIVATE cBanco := "sisdb"

   PRIVATE ColorGrid :=  { 210, 240, 255 }

   PRIVATE aFont := ARRAY FONT "Calibri" SIZE 10 BOLD ITALIC

   SET LANGUAGE TO PORTUGUESE
   SET CODEPAGE TO PORTUGUESE

   HB_SetCodePage( "PT850" )
   hb_langSelect( "PT" )

   PRIVATE bColorGrid := {|| iif(  This.CellRowIndex = 1, { 78,78,78 },   iif( This.CellRowIndex / 2 <> Int( This.CellRowIndex / 2 ), ColorGrid, { 255,255,255 } )  )  }

   PRIVATE fColorGrid := {|| iif(  This.CellRowIndex = 1, { 255,255,255 },   { 78,78,78 }   ) }

   Load Window Main
   Main.Center

   Main.Activate

RETURN



FUNCTION FormateSql( cSql1, aCabec  )

   LOCAL cSqlx   := ''
      LOCAL n1 := Int( hb_Random( 23455 ) )
   LOCAL cTabela := "tab" + DToS( Date() ) + StrZero( n1, 6 )
   LOCAL cSql := ''
   Local cCabec := ''
   Local n1
   
   
   FOR n1 := 1 TO Len( aCabec )
      cCabec += "'" + aCabec[ n1 ] + "',"
   NEXT

   cSql := "drop table if exists " + cTabela + ";"
   oServer:Query( cSql )

   cSql := "SET @row_number:=0; " + Chr( 13 ) + Chr( 10 )
   oServer:Query( cSql )

   cSql := "create table " + cTabela + " as " + Chr( 13 ) + Chr( 10 )
   cSql += cSqlx1
   oServer:Query( cSql )

   cSql := "insert into "  + cTabela + " values(-5," + cCabec + ");" + Chr( 13 ) + Chr( 10 )
   // cSql += "select * from " + cTabela  + " order by row_number;"
   oServer:Query( cSql )

   hb_MemoWrit( 'saida1.txt', cSql )

RETURN cSqlx



FUNCTION Doconsulta()

   LOCAL cSql := "drop temporary table if exists temp1; "
   LOCAL oServer := GetConexao()
   
   //Local cSql := ''

   LOCAL n1 := Int( hb_Random( 23455 ) )

   LOCAL cTabela := "tab" + DToS( Date() ) + StrZero( n1, 6 )

   LOCAL aCabecx := { 'Id', 'Nome', 'Cpf', 'Endereço', 'Status', 'Saldo' }
   LOCAL cCabec := ''

   LOCAL cSqlx1 := "Select @row_number:=@row_number+1 AS row_number , cast(id as Char(2)) as id"
   cSQlx1 += ",nome,cpf,endereco,b.status,cast(b.saldo as char(15)) as saldo "
   cSqlx1 += " from clientes b where (b.saldo >= 0) order by nome ;" + Chr( 13 ) + Chr( 10 )

   // Local cSqlx1 := "Select @row_number:=@row_number+1 AS row_number , cast(id as Char(2)) as id "
   // cSqlx1 += ",nome,cpf,endereco,b.status, b.saldo as saldo "
   // cSqlx1 += " from clientes b where (b.saldo >= 0) order by nome ;" + Chr( 13 ) + Chr( 10 )


   //FOR n1 := 1 TO Len( aCabec )
     // cCabec += "'" + aCabec[ n1 ] + "',"
   //NEXT

   rddSetDefault( "SQLMIX" )

   IF rddInfo( RDDI_CONNECT, { "MYSQL", cServer, cUserDb, cPassDb, cBanco } ) == 0
      MSGSTOP( "Unable connect to the server" )
      RETURN
   ENDIF

   cCabec := Left( cCabec, Len( cCabec ) -1 )

   msginfo( cCabec )



   msginfo( 'ok' )


   // return

   /*
   cSql := "SET @row_number:=0; " + Chr( 13 ) + Chr( 10 )
   oServer:Query( cSql )

   cSql := "create table temp1 as " + Chr( 13 ) + Chr( 10 )
   cSql += "Select @row_number:=@row_number+1 AS row_number , cast(id as Char(2)) as id  ,nome,cpf,endereco,b.status,cast(b.saldo as char(15)) as saldo from clientes b where (b.saldo >= 0) order by nome ;" + Chr( 13 ) + Chr( 10 )
   oServer:Query( cSql )

   cSql := "insert into temp1 values(-5,'Id','nome','cpf','endereco','status','Saldo');" + Chr( 13 ) + Chr( 10 )
   oServer:Query( cSql )


   cSql := "select * from temp1 order by row_number;"

   */


   cSql := FormateSql( cSqlx1 , aCabecx )
   cAlias := "tmp"
   
   MsgInfo(cSql)

   //cSql := "select * from " + cTabela + " order by row_number;"

   dbUseArea( .T.,,  cSql, cAlias )
   dbSelectArea( cAlias )
   dbGoTop()

   aM1 := {}

   msginfo( 'Qt Campos : ' + Str(  FCount() )    )

   aItens := {}

   aCabec := {}

   n2 := 1

   bGrid1 := {}
   bGrid2 := {}

   aJustify := {}

   FOR n2 := 2 TO FCount()


      AAdd( aCabec, FieldName( n2 ) )

      AAdd( aJustify, GRID_JTFY_RIGHT )


      AAdd( bGrid1, bColorGrid )
      AAdd( bGrid2, fColorGrid )

   NEXT


   WHILE !Eof()

      aM1 := {}
      FOR n1 := 2 TO FCount()
         AAdd( aM1, hb_ANSIToOEM( &(FieldName(n1 ) ) )   )
      NEXT

      AAdd( aItens, aM1 )
      dbSkip()

   ENDDO

   MsgInfo( 'Reg : ' + Str(  RecCount() ) )

   dbGoTop()
   // msginfo( Str( Len(aItens) ) )

   dbGoTop()



   // @ 10,10 GRID grid_1 OF MAIN   ;
   // WIDTH 610   ;
   // HEIGHT 390   ;
   // HEADERS { 'Code' , 'Name' , 'Residents' } ;
   // WIDTHS { 250 , 160 , 100 } ;
   // ROWSOURCE "Tmp" ;
   // COLUMNFIELDS { 'tmp->Id' , 'tmp->nome' , 'tmp->saldo' } ;
   // BACKCOLOR {123,134,232 };
   // JUSTIFY { GRID_JTFY_LEFT, GRID_JTFY_LEFT, GRID_JTFY_RIGHT }


   // DoMethod("main", "grid_1","Refresh")

   // Do Events

   // NOHEADERS ;

   AFill( aCabec, '' )

   cGridname := 'G4343'


   @ 0, 10 GRID &cGridName ;
      OF MAIN ;
      WIDTH 770 ;
      HEIGHT 440 ;
      HEADERS aCabec ;
      NOLINES ;
      FONT 'Consolas' SIZE 9;
      FONTCOLOR { 78, 78, 78 } ;
      ITEMS aItens ;
      JUSTIFY aJustify ;
      WIDTHS { 50, 240, 240, 200, 200, 110 } ;
      DYNAMICBACKCOLOR bGrid1 ;
      DYNAMICFORECOLOR bGrid2


   SetProperty( "Main", cGridName, "ColumnDYNAMICBACKCOLOR", 1, ;
      {|| iif( This.CellRowIndex > 1, ColorGrid, { 78,78,78 } )  } )


   SetProperty( "Main", cGridName, "ColumnDYNAMICFONT", 1, {|| aFont }  )
   // {|| Iif(This.CellRowIndex = 1 , aFont , Nil )  } )


   // SHOWHEADERS .F. ;

   // ROWSOURCE "TMP" ;
   // COLUMNFIELDS { 'id' ,  'nome' , 'endereco' ,  'saldo' , 'status' , 'recno()' } ;
   // ALLOWDELETE  ;
   // COLUMNCONTROLS { nIL , Nil , Nil , Nil , Nil , Nil }


   // VALUE { 1 , 1 } ;
   // COLUMNWHEN { { || .T. } ,  { || .T. } , { || .T. } ,  { || .T. } , { || .T. } , { || .F. } } ;


   // COLUMNWHEN { { || .T. } ,  { || .T. } , { || .T. } ,  { || .T. } , { || .T. } , { || .F. } } ;
   // COLUMNCONTROLS { aCtrl_1 , aCtrl_2 , aCtrl_3 , aCtrl_4 , aCtrl_5 , aCtrl_6 } ;


   // DbCloseArea()

   msginfo( 'ok' )


   msginfo( 'ok2' )


   // HMG_ChangeWindowStyle( Main.Browse_1.Handle, WS_EX_TOOLWINDOW+WS_EX_PALETTEWINDOW  , NIL, .T., .T. )



   // Main.Grid_1.Refresh()

   // DO EVENTS

   oServer:Destroy()
   oServer := Nil

   // msginfo('ok')

   dbCloseArea()

RETURN

FUNCTION GetConexao()

   LOCAL oServer
   LOCAL lRet
   LOCAL oQuery

   oServer := TMySQLServer():New( cServer, cUserDb, cPassDb )

   IF oServer:NetErr()
      MsGInfo( "Error ao Conectar SQL Server: " +  oServer:Error() )
      RELEASE Window ALL
      QUIT
   ENDIF

   oServer:SelectDB( cBanco )

   IF oServer:NetErr()
      MsGInfo( "Error ao Conectar Banco " )
      RELEASE Window ALL
      QUIT
   ENDIF

   // msginfo("Conexao Ok")

RETURN ( oServer )

FUNCTION DoFocus()

   DO EVENTS

RETURN
