#include <hmg.ch>
//#include "dll.ch"

//#include "Dll.ch"

//25-09


#include <minigui.ch>

#define QUEBRA Chr(13)+Chr(10)
#define WM_CLOSE      16    //  ok  (MinGW)


STATIC lTracking23 := .F.


REQUEST HB_LANG_PT
REQUEST HB_CODEPAGE_PT850




#define DBI_QUERY             1001
#define RDDI_CONNECT          1001
#define RDDI_DISCONNECT       1002
#define RDDI_EXECUTE          1003
#define RDDI_ERROR            1004
#define RDDI_ERRORNO          1005
#define RDDI_NEWID            1006
#define RDDI_AFFECTEDROWS     1007
#define RDDI_QUERY            1008

REQUEST SDDMY, SQLMIX




#include "dbinfo.ch"
#include "error.ch"


DECLARE WINDOW fFiltro


Function EditConsulta( cTabela , nIdConsu , lMovTable )




	LOCAL aCabec  := GetCamposDic( cTabela, ' ', .F. )
	LOCAL n1 := 1
	Local lDEsc := .t.

	LOCAL lBold      := .F.
	LOCAL lItalic    := .F.
	LOCAL lUnderline := .F.
	LOCAL lStrikeOut := .F.
	Local oSErver
	Local oQuery
	Local oRow



	Local n2
	Local n3
	Local n4
	Local n5

	Local  aSelected := {}
	Local nind1      := 0
	Local aCampos    := {}
	Local aOrdem     := {}

	Local cTpOrdem   := ''

	Local cSql := "select mascara,tipo,tamdisp,camposistema,campo,conscampos.* from conscampos,dicionario  "
	cSql += " where conscampos.idconsulta = " + alltrim(Str(nIdConsu)) +" and iddicionario = idcampo "

	SaveLog(  "c26712.txt" , cSql  )

	
	Private nIndexFiltro := 0

	Private lNovoFilt := .t.

	
	Private lFadd := .f.

	
	Private aButFilt := {}

	Private cTabx := cTabela	

	
	
	Private n11
	Private n12
	Private n13
	Private n14
	Private n15
	Private n16
	Private n17
	Private n18



//	HB_SETCODEPAGE("UTF8")


	oServer := GetConexao()
	oQuery  := oServer:Query( cSql )
	// oRow

	HB_SetCodePage( "UTF8" )


	For n1 := 1 To oQuery:LastRec()
		oRow := oQuery:GetRow(n1)
		cCampo := GetCampo(oRow,'camposistema')

		aadd(aCampos,hb_Utf8ToStr(cCampo) )				

		If (GetCampo(oRow,'ordenado') == 'S')
			aadd(aOrdem , n1)

			If Empty(cTpOrdem)
				cTpOrdem := GetCampo(oRow,'tipoordem')
			End If

		End If


	Next

	Private lOk2 := .f.

	DEFAULT lMovTable := .F.


	PRIVATE aButx1 := {}


	Load Window fCriaConsulta

	ON KEY ESCAPE of fCriaConsulta Action fCriaConsulta.Release()

	fCriaConsulta .LblTabela. value := AllTrim( cTabela )

	Center Window fCriaConsulta

	fCriaConsulta .LstCampos. DeleteAllItems()
	fCriaConsulta .LstOrdem. DeleteAllItems()

	PRIVATE lMvTable := lMovTable

	aSelected := {}
	nind1     := 0
	n1        := 1

	While n1 <= Len( aCabec )

		If !Empty( AllTrim( aCabec[ n1 ] ) )
			fCriaConsulta .LstCampos. Additem( Hb_UTf8ToStr( aCabec[ n1 ] ) )

			//msginfo('achou ' + hb_ANSIToOEM( aCabec[ n1 ] ) )

			nInd1++

			If ascan(aCampos,hb_ANSIToOEM( aCabec[ n1 ] ) ) > 0
				aadd(aSelected,nind1)

				DoMethod('fCriaConsulta','LstOrdem', 'additem' , Hb_UTf8ToStr( aCabec[ n1 ] )  )

			End If

		End If

		n1++

	Enddo



	fCriaConsulta .LstCampos.Value := aSelected
	fCriaConsulta .LstOrdem.Value  := aORdem

	fCriaConsulta.ChkOrd1.Value := (cTpordem = 'Asc' )




	oquery:Destroy()
	oServer:Destroy()


	//MsgInfo('lp')



	cTit1 := 'Edição de Consultas - Id : ' + alltrim(str(nIdConsu))

	SetProperty( 'fCriaConsulta', 'Tab_1', "Captions", { "Campos", "Filtros/Parametros", hb_ANSIToOEM( "Ordenação" ), "Sql"  } )

	cSql := "select * from consultas where tabela = " + Quotedstr(cTabela) + " and id = " + alltrim(str(nidconsu))


	oServer := GetConexao()
	oQuery  := oServer:Query( cSql )
	// oRow

	If oQuery:lastRec() > 0

		oRow := oQuery:GetRow(1)
		SetProperty( 'fCriaConsulta', 'TituloCons', 'Value' , Hb_AnsiToOem( GetCampo(oRow , 'descricao') ) )
		SetProperty( 'fCriaConsulta', 'Obs', 'Value' , Hb_AnsiToOem( GetCampo(oRow , 'observacao') )  )


	Else
		yAviso("Erro ao procurar por Consulta Id.", .f.)
	End If



	oquery:Destroy()
	oServer:Destroy()

	PRIVATE cJanx := 'fCriaConsulta'

	OBTN_Create( cJanx,  6598, "Ok", 330, 500,  65,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJanx, 6598,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )

	OBTN_Create( cJanx, 6599, "Cancelar", 330, 565,  65,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJanx, 6599,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )

	OBTN_Create( cJanx, 6597, "Novo Parametro", 322, 10,  85,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJanx, 6597,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )

	OBTN_Create( cJanx, 6596, "Modificar", 322, 102 ,  62,  24 ,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJanx, 6596,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )

	OBTN_Create( cJanx, 6595, "Excluir", 322, 165 ,  62,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJanx, 6595,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )

	


	AAdd( aButx1, {  6598,  OBTN_Handle( cJanx, 6598 ),   {|| Iif(lOk2 := GrvConsul( cTabela ,nIdConsu) ,  _FechaJan('fCriaConsulta' ),  ) },  cJanx   } )

	AAdd( aButx1, {  6599,  OBTN_Handle( cJanx, 6599 ),   {||   _FechaJan('fCriaConsulta' ) },  cJanx   } )

	AAdd( aButx1, {  6597,  OBTN_Handle( cJanx, 6597 ),   {|| AddPar1( .T., cTabela    ) },  cJanx   } )

	AAdd( aButx1, {  6596,  OBTN_Handle( cJanx, 6596 ),   {|| AddPar1( .F., cTabela ) },  cJanx   } )
	AAdd( aButx1, {  6595,  OBTN_Handle( cJanx, 6595 ),   {|| DelParam() },  cJanx   } )

	EventProcessAllHookMessage( n1 := EventCreate( {||  InputEvButton( aButx1, cJanx ) },    OBTN_Handle( cJanx, 6598 )   ), .T. )
	EventProcessAllHookMessage( n2 := EventCreate( {||  InputEvButton( aButx1, cJanx ) },    OBTN_Handle( cJanx, 6599 )   ), .T. )
	EventProcessAllHookMessage( n3 := EventCreate( {|| InputEvButton( aButx1, cJanx ) },    OBTN_Handle( cJanx, 6597 )   ), .T. )

	EventProcessAllHookMessage( n4 := EventCreate( {|| InputEvButton( aButx1, cJanx ) },    OBTN_Handle( cJanx, 6596 )   ), .T. )
	EventProcessAllHookMessage( n5 := EventCreate( {|| InputEvButton( aButx1, cJanx ) },    OBTN_Handle( cJanx, 6595 )   ), .T. )


	OBTN_Enable( 'fCriaConsulta', 6598, .F. )
	OBTN_Enable( 'fCriaConsulta', 6597, .F. )
	OBTN_Enable( 'fCriaConsulta', 6596, .F. )
	OBTN_Enable( 'fCriaConsulta', 6595, .F. )

	
	InstallEventHandler('EventConsu')
	

	cSqlFiltro := "select relacao,camposistema,tipo,campo,mascara,tamdisp,consparametros.* from consparametros"
	cSQlFiltro += ",dicionario,consultas where idconsul = " + alltrim(Str(nIdConsu)) + " and consultas.id = dicionario.idconsulta and iddicionario = idcampo and consultas.tabela = '" + cTabela + "' order by itemOrdem"

	oServer := GetConexao()
	oQuery  := oServer:Query( cSqlFiltro )



	If (oQuery:LastRec() = 0)
		yAviso("Erro de integridade em A678." , .f. )
	End If

	// oRow


	//HB_SETCODEPAGE("PT850")


	HB_SETCODEPAGE("UTF8")


	For n1 := 1 To oQuery:LastRec()
		oRow := oQuery:GetRow(n1)

		cCampo   := GetCampo(oRow,'camposistema')
		cOperador := alltrim(GetCampo(oRow,'Operador'))
		cValor := GetCampo(oRow,'Valor')
		coplogico := alltrim(GetCampo(oRow,'OpLogico'))

		cEditavel  := Iif(GetCampo(oRow,'Editavel') == 'S','Sim', Hb_Utf8ToStr('Não')  )
		cRequerido := Iif(GetCampo(oRow,'Requerido')  == 'S','Sim', Hb_Utf8ToStr('Não') )
		cPar1      := GetCampo(oRow,'Parentese')
		cPar2      := GetCampo(oRow,'Parentese2')

		fCriaConsulta.gridPar.addItem( {cCampo,cOperador,cValor,cOplOgico,cEditavel,cRequerido,cPar1,cPar2})

	Next

	oquery:Destroy()
	oServer:Destroy()


	//HMG_ChangeWindowStyle( fCriaConsulta.Handle, WS_EX_STATICEDGE, NIL, .T., .T. )

	HMG_ChangeWindowStyle( fCriaConsulta.Handle, WS_BORDER, NIL, .F., .T. )
	HMG_ChangeWindowStyle( fCriaConsulta.Handle, NIL, WS_EX_STATICEDGE, .T., .T. )


	Activate Window fCriaConsulta

	If n1 > 0
	  /*
		EventRemove(n1)
		EventRemove(n2)
		EventRemove(n3)
		EventRemove(n4)
		EventRemove(n5)
		*/
	End If



	RemoveHandler('EventConsu')



Return lOk2

FUNCTION NovaConsulta( cTabela, lMovTable )

	LOCAL aCabec  := GetCamposDic( cTabela, ' ', .F. )
	LOCAL n1 := 1

	LOCAL lBold      := .F.
	LOCAL lItalic    := .F.
	LOCAL lUnderline := .F.
	LOCAL lStrikeOut := .F.

	Local nIndexConsulta := 0

	Private lOk2 := .f.

	DEFAULT lMovTable := .F.

	Private lNovoFilt := .t.

	Private lFadd := .f.


	Private nIndexFiltro := 0

	Private aButFilt := {}

	Private cTabx := cTabela
	

	
	Private n11
	Private n12
	Private n13
	Private n14
	Private n15
	Private n16
	Private n17
	Private n18


	SET LANGUAGE TO PORTUGUESE
	SET CODEPAGE TO PORTUGUESE

	HB_SetCodePage( "UTF8" )
	//hb_langSelect( "PT" )

	PRIVATE aButx1 := {}

	Private cTabelaOri := cTabela


	//msginfo('nvconsulta')

	Load Window fCriaConsulta

	ON KEY ESCAPE of fCriaConsulta Action fCriaConsulta.Release()

	fCriaConsulta .LblTabela. value := AllTrim( cTabela )

	Center Window fCriaConsulta

	fCriaConsulta .LstCampos. DeleteAllItems()

	PRIVATE lMvTable := lMovTable

	While n1 <= Len( aCabec )

			If !Empty( AllTrim( aCabec[ n1 ] ) )
				fCriaConsulta .LstCampos. Additem( hb_Utf8ToStr( aCabec[ n1 ] ) )
			End If

			n1++

	Enddo

	cTit1 := 'Criação de Consultas'
	

	HB_SETCODEPAGE("PT850")

	SetProperty( 'fCriaConsulta', 'Title', hb_ANSIToOEM( cTit1 ) )
	SetProperty( 'fCriaConsulta', 'Label_4', "Value", Hb_Ansitooem( "Observação" ) )

	SetProperty( 'fCriaConsulta', 'Tab_1', "Captions", { "Campos", "Filtros/Parametros", hb_ANSIToOEM( "Ordenação" ), "Sql"  } )

	PRIVATE cJanx := 'fCriaConsulta'


	OBTN_Create( cJanx,  6598, "Ok", 330, 500,  65,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJanx, 6598,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )

	OBTN_Create( cJanx, 6599, "Cancelar", 330, 565,  65,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJanx, 6599,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )

	OBTN_Create( cJanx, 6597, "Novo Parametro", 322, 10,  85,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJanx, 6597,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )

	OBTN_Create( cJanx, 6596, "Modificar", 322, 100,  62,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJanx, 6596,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )

	OBTN_Create( cJanx, 6595, "Excluir", 322, 165 ,  62,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJanx, 6595,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )

	AAdd( aButx1, {  6598,  OBTN_Handle( cJanx, 6598 ),   {|| Iif(lOk2 := GrvConsul( cTabela  ) , xFechaCon()  , ) },  cJanx   } )

	AAdd( aButx1, {  6599,  OBTN_Handle( cJanx, 6599 ),   {||   xFechaCon()   },  cJanx   } )

	AAdd( aButx1, {  6597,  OBTN_Handle( cJanx, 6597 ),   {|| AddPar1( .T., cTabela ) },  cJanx   } )
	AAdd( aButx1, {  6596,  OBTN_Handle( cJanx, 6596 ),   {|| AddPar1( .F., cTabela ) },  cJanx   } )
	AAdd( aButx1, {  6595,  OBTN_Handle( cJanx, 6595 ),   {|| DelParam() },  cJanx   } )

	EventProcessAllHookMessage( EventCreate( {|| InputEvButton( aButx1, cJanx ) },    OBTN_Handle( cJanx, 6598 )   ), .T. )
	EventProcessAllHookMessage( EventCreate( {|| InputEvButton( aButx1, cJanx ) },    OBTN_Handle( cJanx, 6599 )   ), .T. )
	EventProcessAllHookMessage( EventCreate( {|| InputEvButton( aButx1, cJanx ) },    OBTN_Handle( cJanx, 6597 )   ), .T. )

	EventProcessAllHookMessage( EventCreate( {|| InputEvButton( aButx1, cJanx ) },    OBTN_Handle( cJanx, 6596 )   ), .T. )
	EventProcessAllHookMessage( EventCreate( {|| InputEvButton( aButx1, cJanx ) },    OBTN_Handle( cJanx, 6595 )   ), .T. )



	OBTN_Enable( 'fCriaConsulta', 6598, .F. )

	OBTN_Enable( 'fCriaConsulta', 6597, .F. )
	OBTN_Enable( 'fCriaConsulta', 6596, .F. )
	OBTN_Enable( 'fCriaConsulta', 6595, .F. )


	InstallEventHandler('EventConsu')

	HMG_ChangeWindowStyle( fCriaConsulta.Handle, WS_BORDER, NIL, .F., .T. )
	HMG_ChangeWindowStyle( fCriaConsulta.Handle, NIL, WS_EX_STATICEDGE, .T., .T. )

	Activate Window fCriaConsulta

	//SysWait(.5)

	RemoveHandler('EventConsu')




RETURN lok2


Function xFechaCon()

	_FechaJan('fCriaConsulta' )

	if _IsWindowDefined('fFiltro')
		DestroyWindow( fFiltro.HANDLE	)
	End If	

Return 

Function _FechaJan(   cJanx1 )


	SendMessage  ( GetFormHandle(cJanx1)  , WM_SYSCOMMAND, SC_CLOSE, 0 )
	
REturn


FUNCTION EventConsu( nHWnd, nMsg, nWParam, nLParam )
//FUNCTION EventConsu()

	LOCAL nID
	LOCAL ButHnd
	LOCAL nRow, nCol
	LOCAL nind1
	LOCAL cJanela := cJanx
	LOCAL cControl := ''
	LOCAL cform := ''


	If (nMsg == WM_DRAWITEM)


		nID := LoWord( nWParam )

		If nID == IDOK
			nID := GetDlgCtrlID( GetFocus() )
		End If 

		nI1 := AScan( aButx1, {| n| n[ 1 ] == nId } )

		If nI1 > 0
			OBTN_Draw( nHWnd,  nWParam, nLParam )
		End If


	End If

	If (nMsg == 273)

		nID := LoWord( nWParam )

		If nID == IDOK
			nID := GetDlgCtrlID( GetFocus() )
		End If 

		nI1 := AScan( aButx1, {| n| n[ 1 ] == nId } )

		If nI1 > 0
			//SysWait(.3)
			If nI1 <= Len(aButx1)
				Eval(   aButX1[ ni1 ][ 3 ] )		
			End If 	
		End If 

		If nId == 6598

		End If

		If nId == 6599

		End If

	End If 

	//END IF

RETURN NIL


FUNCTION AddPar1( lNovo, cTabelax , lEnable1 )

	LOCAL wCad := cTabelaX
	LOCAL aCampos

	LOCAL cJany := 'fFiltro'
	Local cVal


	Local nItem1 := GetProperty('fCriaConsulta','Gridpar','itemCount')


	//Local nIndexFiltro := 0
	LOCAL aMoper := {}
	LOCAL aMLogico := {}

	LOCAL cTipo1 := ''

	LOCAL lBold      := .F.
	LOCAL lItalic    := .F.
	LOCAL lUnderline := .F.
	LOCAL lStrikeOut := .F.

		


	DEFAULT lNovo    := .T.
	DEFAULT lEnable1 := .f.

	IF lNovo
		PushButton( cJanx, 6597 )
	ELSE
		PushButton( cJanx, 6596 )
	END IF

	Private aCampos1 := {}

	If !_isWindowDefined('fFiltro')
		Load Window fFiltro
	End If 	

	HMG_ChangeWindowStyle(  fFiltro.Handle , WS_EX_DLGMODALFRAME, NIL, .T., .T. )


	lNovoFilt := lNovo
		

	Center Window fFiltro

	//ON KEY ESCAPE Of fFiltro ACTION fFiltro.Release()

	HB_SETCODEPAGE("PT850")

   	SetProperty("fFiltro" , "Frame_1" , "Caption" , Hb_AnsiToOem("Criação de Parametros Consulta" )  )   

         
    ON KEY ESCAPE OF fFiltro Action xFechay()




	fFiltro .cmbCampo. DeleteAllItems()
	fFiltro .cmbOrdem. DeleteAllItems()

	fFiltro.Title := "Construtor Parametros "

	fFiltro .lblTabela. Caption := Upper( wCad )

	PRIVATE aCmps := GetCamposDic( wCad, ' ',  .F. )


	FOR n := 1 TO Len( aCmps )
		fFiltro .cmbCampo. AddItem( Hb_UTf8ToStr( aCmps[ n ] ) )
		aadd(aCampos1,    hb_UTF8TOSTR( aCmps[ n ] ) )
	NEXT

	fFiltro .cmbCampo. value := 1

	fFiltro .cmbOrdem. enabled := .F.
	fFiltro .Titulo. enabled := .F.

	fFiltro .EdtFiltro. enabled := .F.


	fFiltro .ChkRequerido. visible := .T.
	fFiltro .ChkRequerido. value   := .T.



	fFiltro .chkOrdem. caption := 'Editavel'
	

	If !lNovo

		fFiltro .Titulo. enabled := .F.

		nIt1 := fCriaconsulta .gridPar. Value
		aIt1 := fCriaconsulta .gridPar. Item( nIt1 )

		If nIt1 > 0

			// fFiltro .Btnok. Enabled := .T.

			fFiltro .chkOrdem. value     := ( aIt1[ 5 ] == 'Sim' )
			fFiltro .chkRequerido. value := ( aIt1[ 6 ] == 'Sim' )

			fFiltro .cmbCampo. value := AScan( aCmps, ait1[ 1 ] )

			cTipo1 := Alltrim(GetInfoDic( Alltrim(ait1[ 1 ]), cTabela , 'TIPO' ))



			aMoper := {}
			aMLogico := {}

			For n1 := 1 TO fFiltro .cmbOperador. itemCount
				AAdd( aMOper,    fFiltro .cmbOperador. item( n1 ) )
			Next

			For n1 := 1 TO fFiltro .cmbLogico. itemCount
				AAdd( aMLogico,    fFiltro .cmbLogico. item( n1 ) )
			Next

			fFiltro .cmbOperador. value := AScan( aMoper, ait1[ 2 ] )

			// Aviso( ait1[ 3 ] )

			fFiltro .cmbLogico. value := AScan( aMLogico, ait1[ 4 ] )
			// fFiltro .Btnok. Enabled := .T.


			SetProperty( "fFiltro", "GetData1", "Visible", .F. )
			SetProperty( "fFiltro", "DoubleEdit", "Visible", .F. )
			SetProperty( "fFiltro", "Valor", "Visible", .F. )
			SetProperty( "fFiltro", "EdtNum", "Visible", .F. )

			If cTipo1 == "B"
				fFiltro .DoubleEdit. Visible := .T.
				fFiltro .DoubleEdit. Value   := Val( ait1[ 3 ] )
				cVal := alltrim(Str( Val( ait1[ 3 ] ),10,2 ))
			End If

			If (cTipo1 $ "IN")
				fFiltro .EdtNum. Visible := .T.
				fFiltro .EdtNum. Value   := Val( ait1[ 3 ] )
				cVal := alltrim(Str( Val( ait1[ 3 ] ) ))
				// msginfo('num ' + ' ' +  ait1[ 3 ])
			End If

			If cTipo1 == "D"
				fFiltro .GetData1. Visible := .T.
				fFiltro .GetData1. Value   := CToD( ait1[ 3 ] )

				//cValor   := ait1[ 3 ]
				cVal     := Chr(39) + Right( ait1[ 3 ]  , 4 ) + '-' + SubStr( ait1[ 3 ]   , 4, 2 ) + '-' + Left( ait1[ 3 ]   , 2 ) + Chr(39)

			End If

			If cTipo1 == "C"
				fFiltro .Valor. Visible := .T.
				fFiltro .valor. value := ait1[ 3 ]
				cVal :=  Chr(39) + ait1[ 3 ]  + chr(39)
			End If


			fFiltro.EdtFiltro.value :=  Iif( alltrim(aIt1[ 4 ]) != "Nenhum", aIt1[ 4 ] , '' )   + ' ' + alltrim(aIt1[ 7 ]) + alltrim(ait1[ 1 ]) +' '+ alltrim(left(ait1[ 2 ],2))  +' '+ cVal + alltrim(aIt1[ 8 ])


		End If

	End If



    
	OBTN_Create( cJany,  6600, "Ok", 333, 300,  65,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJany, 6600 ,  { cFontName, nFontSize, .F., .F., .F., .F. } )
	


	OBTN_Create( cJany, 6601, "Cancelar", 333, 365,  65,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJany, 6601,  { cFontName, nFontSize, .F., .F., .F., .F. } )




	OBTN_Create( cJany, 6602, "Adicionar", 297, 15,  65,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJany, 6602,  { cFontName, nFontSize, .F., .F., .F., .F. } )





	OBTN_Create( cJany, 6603, "Limpar Filtro", 297, 87,  65,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJany, 6603,  { cFontName, nFontSize, .F., .F., .F., .F. } )


	OBTN_Create( cJany  ,  9591 , "(", 300 , 180 ,  45,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJany    , 9591  ,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )


	OBTN_Create( cJany  ,  9581 , ")", 300 , 232 ,  45,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font(  cJany    , 9581  ,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )


	//OBTN_Release( cJany  , 3541 )
	OBTN_Create( cJany  ,  3541 , "And", 300 , 280 ,  45,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJany    ,  3541  ,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )




	//OBTN_Release( cJany  , 3581 )	
	OBTN_Create( cJany  ,  3581 , "Or", 300 , 325 ,  45,  24,  .T., .T., .T.,  8, aBtnColor, aBtnFont )
	OBTN_Font( cJany    ,  3581  ,  { cFontName, nFontSize, lBold, lItalic, lUnderline, lStrikeOut } )





	AAdd( aButFilt , { 6600,  OBTN_Handle( cJany , 6600 ),   {|| RetFiltro()   } ,  cJany   } )
	AAdd( aButFilt, {  6601, OBTN_Handle( cJany  , 6601 ),   {||   (PushButton( cJany, 6601 ) , xFechay() )  },  cJany   } )

	AAdd( aButFilt, {  6602, OBTN_Handle( cJany  , 6602 ),   {||  PushButton( 'fFiltro' , 6602 ),	FiltroAdd()    },  cJany    } )
 
   
	AAdd( aButFilt  , {  6603,  OBTN_Handle( cJany  , 6603 ),   {|| OBTN_Enable( 'fFiltro' , 6600 , .f. ) ,   PushButton( 'fFiltro' , 6603 ),	LimpaFilt()  },  cJany   } )


	AAdd( aButFilt  , {  9591,  OBTN_Handle( cJany  , 9591 ),   {|| PushButton( cJany , 9591 ),	UpdFiltro('(')   },  cJany   } )
 
	AAdd( aButFilt , {  9581,  OBTN_Handle( cJany  , 9581 ),   {||  PushButton( cJany, 9581 ),  UpdFiltro( ')' )   },  cJany   } )


	AAdd( aButFilt , {  3541,  OBTN_Handle( cJany  , 3541 ),   {||  PushButton( 'fFiltro' , 3541 ) ,OBTN_Enable( 'fFiltro' , 9591 , .t. ),OBTN_Enable( 'fFiltro' , 9581,  .t. ), UpdFiltro('And')  },  cJany   } )
 
 
	AAdd( aButFilt , {  3581,  OBTN_Handle( cJany  , 3581 ),   {|| PushButton( 'fFiltro' , 3581 ),OBTN_Enable( 'fFiltro' , 9591 , .t. ),OBTN_Enable( 'fFiltro' , 9581,  .t. ),	UpdFiltro('Or') },  cJany   } )
	//AAdd( aButFilt , {  9481,  OBTN_Handle( cJany  , 9481 ),   {||  PushButton( cJan, 9481 ),  UpdFiltrox( 'Or' )   },  cJan   } )
 
	
	OBTN_Enable( cJany  , 3541,  (nItem1 >= 1) )
	OBTN_Enable( cJany  , 3581,  (nItem1 >= 1) )



	EventProcessAllHookMessage( n11 := EventCreate( {|| InputEvButton( aButFilt, cJany ) },    OBTN_Handle( cJany, 6600 )   ), .T. )
	EventProcessAllHookMessage( n12 := EventCreate( {|| InputEvButton( aButFilt, cJany ) },    OBTN_Handle( cJany, 6601 )   ), .T. )

	EventProcessAllHookMessage( n13 := EventCreate( {|| InputEvButton( aButFilt, cJany ) },    OBTN_Handle( cJany, 6602 )   ), .T. )
	EventProcessAllHookMessage( n14 := EventCreate( {|| InputEvButton( aButFilt, cJany ) },    OBTN_Handle( cJany, 6603 )   ), .T. )

	EventProcessAllHookMessage( n15 := EventCreate( {|| InputEvButton( aButFilt, cJany ) },     OBTN_Handle( cJany, 9591 )   ), .T. )
	EventProcessAllHookMessage( n16  := EventCreate( {|| InputEvButton( aButFilt, cJany ) },    OBTN_Handle( cJany, 9581 )   ), .T. )

	EventProcessAllHookMessage( n17  := EventCreate( {|| InputEvButton( aButFilt, cJany ) },    OBTN_Handle( cJany, 3541 )   ), .T. )
	EventProcessAllHookMessage( n18  := EventCreate( {|| InputEvButton( aButFilt, cJany ) },    OBTN_Handle( cJany,  3581 )   ), .T. )

	

	
	HMG_ChangeWindowStyle( fFiltro.Handle, WS_BORDER, NIL, .F., .T. )
	HMG_ChangeWindowStyle( fFiltro.Handle, NIL, WS_EX_STATICEDGE, .T., .T. )
 
 
	InstallEventHandler('EvFiltButton')	


	lNextOp := .f. 
	lFadd := .f. 
	

	If (lNovoFilt)
		fFiltro.EdtFiltro.value := ' '	
	End If 	


 	fFiltro.Show()

	fFiltro.SetFocus()  

    

Return 


Static Function xFechaz()

		RemoveHandler('EvFiltButton')
			
		DestroyWindow(   OBTN_Handle('fFiltro' , 6600)    )
		DestroyWindow(   OBTN_Handle('fFiltro' , 6601)    )
		DestroyWindow(   OBTN_Handle('fFiltro' , 6602)    )
	 
	 
		DestroyWindow(   OBTN_Handle('fFiltro' , 6603)    )


		DestroyWindow(   OBTN_Handle('fFiltro' , 9591)    )
	 
		DestroyWindow(   OBTN_Handle('fFiltro' , 9581)    )
	 
	 
		DestroyWindow(   OBTN_Handle('fFiltro' , 3541)    )
		DestroyWindow(   OBTN_Handle('fFiltro' , 3581)    )

   	    fFiltro.Hide()

//		DestroyWindow(   fFiltro.Handle  )



Return 

Static Function ChgxFltr( cName )

	Local cJanp := 'fFiltro'
	Local n1 := GetProperty('fCriaConsulta','GridPar','ItemCount')

	If lNovoFilt
		If  ( Len( AllTrim(fFiltro .Valor. Value ) ) > 0 ) .OR. ( fFiltro .Getdata1. Visible  ) .or. ;
				(fFiltro .DoubleEdit. Value > 0) .or. ( fFiltro.EdtNum.Value > 0)
			//  msginfo('pa ' + cName )

			IF (fFiltro .CmbCampo. value > 0 )
				// OBTN_Enable( cjanp , 6602, .t. )
			End fF

		Else
			//OBTN_Enable( cjanp , 6602 , .f. )
		End If 
	Else
		OBTN_Enable( cjanp , 6602 , .t. )
	End If 

	OBTN_Enable( cjanp , 6600 , .t. )
	OBTN_Enable( cjanp , 6603 , .t. )



RETURN




FUNCTION HandX( cJan1, n1, n2, nH1 )

	LOCAL nId := 0
	LOCAL nz1

	FOR nz1 := n1 TO n2
		IF ( OBTN_Handle( cJan1, nz1 ) == nH1 )
			IF nId == 0
				nId := nZ1
			END IF
		END IF
	NEXT

RETURN nId

FUNCTION InputEvFilt()

	//STATIC



	LOCAL  nHWnd   := EventHWND()
	LOCAL  nMsg    := EventMSG()
	LOCAL  nWParam := EventWPARAM()
	LOCAL  nLParam := EventLPARAM()

	LOCAL cFormx := 'fFiltro'
	LOCAL nind1
	LOCAL nIdBut := 0

	LOCAL n1
	LOCAL ButHnd

	lTracking23 := .F.
	nIdBut := Handx( cFormx, 6600, 6603, nHWnd )

	If nidBut = 0
		nIdBut := Handx( cFormx, 9581, 9591, nHWnd )
	End If

	If nidBut = 0
		nIdBut := Handx( cFormx, 3541, 3581, nHWnd )
	End If


	IF ( nIdBut > 0 )

		IF ( nMsg == WM_MOUSEMOVE ) .And. (!lTracking23 )

			lTracking23 := TrackMouseEvent( nHWnd ) // TME_LEAVE is default flag

			OBTN_Color( cFormx, nIdBut, aBtnSel, .T. )
			OBTN_Enable( cFormx, nIdBut, .T. )
			OBTN_Visible( cFormx, nIdBut, .T. )

		END IF

		IF ( nMsg == WM_MOUSELEAVE )

			OBTN_Color( cFormx,  nIdBut, aBtnColor, .T. )
			OBTN_Enable( cFormx, nIdBut, .T. )
			OBTN_Visible( cFormx, nIdBut, .T. )

			lTracking23 := .F.

		END IF
	ELSE

	END IF

RETURN

//FUNCTION EventHndFlt( nHWnd, nMsg, nWParam, nLParam )
/*
FUNCTION EventHndFlt()

	LOCAL nID
	LOCAL ButHnd
	LOCAL nRow, nCol
	LOCAL nind1
	LOCAL cMenuName := 'fFiltro'

	LOCAL  nHWnd   := EventHWND()
	LOCAL  nMsg    := EventMSG()
	LOCAL  nWParam := EventWPARAM()
	Local nLParam  := EventLPARAM()

	IF !_IsWindowDefined ( cMenuName )
		RETURN
	END IF
	//

	IF nHWnd == GetProperty(  cMenuName, "HANDLE" )

		IF nMsg == WM_DRAWITEM

			IF ( nWParam >=  6600 ) .AND.  ( nWParam <=  6603 )
				OBTN_Draw( nHWnd,  nwParam, nLParam )
			END IF


			IF ( nWParam =  9591 ) .Or.  ( nWParam <=  9581 )
				OBTN_Draw( nHWnd,  nwParam, nLParam )
			END IF

		END IF

		IF nMsg == 273

			// msginfo('here')

			nID := LoWord( nWParam )

			IF nID == IDOK
				nID := GetDlgCtrlID( GetFocus() )
			ENDIF

			IF nId == 6600
				RetFiltro()
			END IF

			IF nId == 6601			
				If IsWindowVisible( fFiltro.Handle)	
					xFechay()
				End If 	
			END IF


			IF nId == 9591
				// msginfo('2')
				PushButton( 'fFiltro' , 9591 )
				//sysWait(.1)
				UpdFiltro('(')
			END IF


			IF nId == 3541
				PushButton( 'fFiltro' , 3541 )
				OBTN_Enable( 'fFiltro' , 9591 , .t. )
				OBTN_Enable( 'fFiltro' , 9581,  .t. )
				sysWait(.1)
				UpdFiltro('And')
				//      OBTN_Enable( 'fFiltro' , 3541 ,  .f. )
				//    OBTN_Enable( 'fFiltro' , 3581 ,  .f. )
			END IF

			IF nId == 3581

				PushButton( 'fFiltro' , 3581 )
				OBTN_Enable( 'fFiltro' , 9591 , .t. )
				OBTN_Enable( 'fFiltro' , 9581,  .t. )
				//sysWait(.1)
				UpdFiltro('Or')
				//  OBTN_Enable( 'fFiltro' , 3581 ,  .f. )
				//OBTN_Enable( 'fFiltro' , 3541 ,  .f. )
			END IF


			IF nId == 9581
				// msginfo('1')
				PushButton( 'fFiltro' , 9581 )
				//sysWait(.1)
				UpdFiltro(')')
			END IF

			IF nId == 6602
				// msginfo('1')
				PushButton( 'fFiltro' , 6602 )
				//sysWait(.2)
				FiltroAdd()


				//OBTN_Enable( 'fFiltro', 6603, .T. )

			END IF

			IF nId == 6603
				// msginfo('1')
				PushButton( 'fFiltro' , 6603 )
				//sysWait(.1)
				LimpaFilt()
			END IF

		END IF

	END IF

RETURN

*/


Static Function UpdFiltro(cCar1)

	Local c1 := alltrim(GetProperty("fFiltro","EdtFiltro","Value"))
	Local nCount1 := GetProperty('fCriaConsulta','GridPar','ItemCount')


	If (cCar1 = 'And') .or. (cCar1 = 'Or')

	    If !lNovoFilt
			If !Empty(Alltrim(c1))
				yAviso( "Operadores 'And' ou 'Or' so podem ser Utilizados no Inicio Dos Filtros." , .f. )
				Return 
			End If 

		Else

			If (nCount1 >= 1)
				If !Empty(Alltrim(c1))
					yAviso( "Operadores 'And' ou 'Or' so podem ser Utilizados no Inicio Dos Filtros." , .f. )
					Return 
				End If 
			End If	
			  	
		End If 	
		
	End If 	

	fFiltro.EdtFiltro.value := c1+' ' + cCar1 + ' '

	If (Len(Alltrim(  fFiltro.EdtFiltro.value  )) > 0)
		If (Alltrim(fFiltro.EdtFiltro.value)   != "Or" ) .And. (Alltrim(fFiltro.EdtFiltro.value) != "And" )
			OBTN_Enable( 'fFiltro', 6600, .T. )
		End If
	End If


REturn


STATIC FUNCTION ChgFiltro()

	
	If lNovoFilt
		
	Else 
		
		OBTN_Enable( 'fFiltro', 6600, Len( AllTrim(fFiltro .Valor. Value ) ) > 0 )
	End If 

RETURN



FUNCTION GFocus()

	IF GetProperty( 'fCriaConsulta', 'GridPar', 'ItemCount' ) > 0

		OBTN_Enable( 'fCriaConsulta', 6597, .T. )
		OBTN_Enable( 'fCriaConsulta', 6596, .T. )
		OBTN_Enable( 'fCriaConsulta', 6595, .T. )


	ELSE

		OBTN_Enable( 'fCriaConsulta', 6596, .F. )
		OBTN_Enable( 'fCriaConsulta', 6595, .F. )

	END IF

	// DO EVENTS

RETURN

FUNCTION DelParam()

	LOCAL n1 := GetProperty( 'fCriaConsulta', 'GridPar', 'Value' )

	PushButton( cJanx, 6595 )

	IF n1 > 0
		fCriaConsulta .GridPar. DeleteItem( n1 )
	END IF

	CheckOk( .T. )
	GFocus()

	// ProcessMessages()
	DO EVENTS

RETURN



Function Contey( cChar , cC1)

	Local n1
	Local nQ1 := 0

	For n1 :=1 to LEn(cChar)

		If Substr(cChar,n1,1) = cC1
			nq1++
		End If

	Next

Return nQ1

STATIC FUNCTION RetFiltro()



	LOCAL nItem := 0
	Local nCount1 := GetProperty('fCriaConsulta','Gridpar','ItemCount')

	Local nX1  := Contey( fFiltro.EdtFiltro.value , '(')
	Local nX2  := Contey( fFiltro.EdtFiltro.value , ')')
	Local cOpLogic := Iif(Left(  Upper(alltrim(fFiltro.EdtFiltro.value)) ,4) = 'AND ' , 'And' , ;
		Iif(Left(  Upper(alltrim(fFiltro.EdtFiltro.value)) ,3) = 'OR ' ,'Or',''))



	LOCAL nValor := iif( fFiltro .EdtNum. Visible, AllTrim( Str(fFiltro .EdtNum. Value ) ), ;
		iif( fFiltro .DoubleEdit. Visible, AllTrim( Str(fFiltro .DoubleEdit. Value,10,2 ) ), "-1" ) )
	LOCAL nCount := fCriaConsulta .GridPar. ItemCount


	LOCAL aM1 
	


	HB_SETCODEPAGE("PT850")
	
	aM1 := { ( fFiltro .cmbCampo. DisplayValue ), fFiltro .cmbOperador. DisplayValue, ;
	Iif( !fFiltro .Getdata1. Visible, iif( Val(nValor ) >= 0, nValor, AllTrim( fFiltro .Valor. Value ) ),  DToC( fFiltro .Getdata1. Value )   ),  ;
	cOpLogic , ;
	Iif( fFiltro .ChkOrdem. Value, hb_ANSIToOEM( 'Sim' ), Hb_ansiToOem( 'Não' )  ), ;
	Iif( fFiltro .ChkRequerido. Value, hb_ANSIToOEM( 'Sim' ), Hb_AnsiToOem( 'Não' ) ),  Replicate('(',nX1) ,  Replicate(')',nX2)     }


	If lNovoFilt
		DoMethod( "fCriaConsulta", "GridPar", "AddItem", aM1 )
	Else
		nItem := fCriaConsulta .GridPar. value
		fCriaConsulta .GridPar. Item( nItem ) := aM1
	End If 

	CheckOk()

	//msginfo('1')
	xFechay()
	//msginfo('2')
	//_FechaJan( 'fFiltro' )


RETURN

FUNCTION EditPar()

	AddPar1( .F. )

RETURN

FUNCTION CheckOk( lOk9, lAviso )

	LOCAL n1
	LOCAL ait1 := {}
	LOCAL lOk1 := .T.

	LOCAL lok2 := .F.

	DEFAULT lOk9 := .F.
	DEFAULT lAviso := .F.

	OBTN_Enable( 'fCriaConsulta', 6598, .f. )

	
	If Len( fCriaConsulta .LstCampos. Value ) > 0
		For n1 := 1 TO Len( fCriaConsulta .LstCampos. Value )
			lOk1 := .T.
		Next
	End If

	lOk2 := ( GetProperty( 'fCriaConsulta', 'GridPar', "ItemCount" ) > 0 )

	

	If !lOk1
		// msginfo('ckeck ok1 ')
	Else

		If lOk2

	
			If ( Len( AllTrim( GetProperty( 'fCriaConsulta', 'TituloCons', 'Value' ) )   ) > 0 ) .AND. ;
					( fCriaConsulta .GridPar. ItemCount > 0 ) .AND. ;
					( Len( fCriaConsulta .LstCampos. Value ) > 0 )
				OBTN_Enable( 'fCriaConsulta', 6598, .T. )
			Else

			End If

		Else

		End If

	End If

Return .F.

FUNCTION ChgField()

	LOCAL cCampo := fFiltro .CmbCampo. DisplayValue
	LOCAL cTabela := AllTrim( fFiltro .lblTabela. Caption )

	LOCAL cTipo := GetInfoDic( cCampo, cTabela, 'TIPO' )
	LOCAL cMask := GetInfoDic( cCampo, cTabela, 'MASCARA' )

	SetProperty( "fFiltro", "Valor", "InputMask", Nil )

	SetProperty( "fFiltro", "GetData1", "Visible", .F. )
	SetProperty( "fFiltro", "DoubleEdit", "Visible", .F. )
	SetProperty( "fFiltro", "Valor", "Visible", .F. )
	SetProperty( "fFiltro", "EdtNum", "Visible", .F. )

	IF cTipo == 'D'

		SetProperty( "fFiltro", "GetData1", "Visible", .T. )
		SetProperty( "fFiltro", "GetData1", "Col", 150 )
		SetProperty( "fFiltro", "Valor", "Visible", .F. )

		// SetProperty( 'fFiltro', 'BtnOk', 'Enabled', .T. )
		OBTN_Enable( 'fFiltro', 6600, .T. )
		// Aviso('kk')

	DO EVENTS

END IF

IF ( cTipo == 'B' )

	SetProperty( "fFiltro", "DoubleEdit", "Visible", .T. )
	SetProperty( "fFiltro", "DoubleEdit", "Col", 150 )
	SetProperty( "fFiltro", "DoubleEdit", "Row", 116 )

	fFiltro .DoubleEdit. Value := AllTrim( Transform( 0, cMask ) )
	SendMessage( GetControlHandle( "DoubleEdit", ThisWindow.Name ), WM_PAINT, 0, 0 )

	// fFiltro .Btnok. Enabled := .T.
	OBTN_Enable( 'fFiltro', 6600, .T. )
	fFiltro .DoubleEdit. SetFocus()
	// fFiltro .Valor. Refresh()
END IF


IF ( cTipo == 'N' ) .OR. ( cTipo == 'I' )


	SetProperty( "fFiltro", "EdtNum", "Visible", .T. )
	SetProperty( "fFiltro", "EdtNum", "Col", 150 )
	SetProperty( "fFiltro", "EdtNum", "Row", 116 )

	fFiltro .EdtNum. Value := 0
	SendMessage( GetControlHandle( "IntEdit", ThisWindow.Name ), WM_PAINT, 0, 0 )

	// fFiltro .Btnok. Enabled := .T.

	OBTN_Enable( 'fFiltro', 6600, .T. )

	fFiltro .IntEdit. SetFocus()
	// fFiltro .Valor. Refresh()
END IF

IF cTipo == 'C'
	SetProperty( "fFiltro", "Valor", "Visible", .T. )
	fFiltro .Valor. Value := ''
	SendMessage( GetControlHandle( "Valor", ThisWindow.Name ), WM_PAINT, 0, 0 )
	// fFiltro .Btnok. Enabled := .T.
	OBTN_Enable( 'fFiltro', 6600, .T. )
	fFiltro .Valor. SetFocus()
END IF

// fFiltro .BtnAdd. Enabled := .F.

// fFiltro .Valor. SetFocus()
//OBTN_Enable( 'fFiltro', 6602, .F. )

DO EVENTS

RETURN

FUNCTION GetDescTable( cTable, lOrdemId )

	LOCAL cSql    := "select * from " + cTable + " where status = 'Ativo' order by 2"
	LOCAL oServ   := GetConexao()
	LOCAL oRow
	LOCAL ni      := 1
	LOCAL aRet    := {}
	LOCAL oQuery

	DEFAULT lOrdemId := .F.

	IF lOrdemId
		// Aviso('ordem id ' + cTable)
		cSql    := "select * from " + cTable + " where status = 'Ativo' order by 1"
	END IF

	oQuery := oServ:Query( cSql )

	FOR ni := 1 TO oQuery:LastRec()

		oRow := oQuery:GetRow( ni )

		AAdd( aRet, oRow:FieldGet( 2 ) )
		oQuery:Skip( 1 )

	NEXT

	oQuery:Destroy()
	oQuery := Nil

	oServ:Destroy( 0 )
	oServ := Nil

RETURN aRet

FUNCTION GetInfoDic( cCampo1, cTabela, cInfo )

	LOCAL cSql    := "select * from dicionario where (camposistema = '" + AllTrim( cCampo1 ) + "') and (tabela = '" + cTabela + "')"
	LOCAL oServ   := GetConexao()
	LOCAL oRow
	LOCAL cRet    := ''

	HB_SetCodePage("PT850")


	hb_MemoWrit( 'SqlinfoDic123.txt', cSql )
	
	HB_SetCodePage("UTF8")

	oQuery := oServ:Query( cSql )



	If oQuery:Eof()
		yAviso(  HB_AnsiToOem( hb_ANSIToOEM('Houve um Erro ao tentar recuperar Informações do Campo : ' + cCampo1  + ".") + ;
			"Tabela : " + cTabela + "/" + cInfo + QUEBRA + ;
			'Contactar Suporte!') , .f. )
	Else

		oRow := oQuery:GetRow( 1 )

		If cInfo == 'CAMPO'
			cRet := oRow:FieldGet( 3 )
		End If 

		If cInfo == 'ID'
			cRet := AllTrim( Str( oRow:FieldGet( 1 ) ) )
		End If

		If cInfo == 'TAM'
			cRet := oRow:FieldGet( 7 )
		End If 

		If cInfo == 'TIPO'
			cRet := oRow:FieldGet( 4 )
		End If 

		If cInfo == 'MASCARA'
			cRet := oRow:FieldGet( 8 )
		End If 

	End If 

	oQuery:Destroy()
	oQuery := Nil

	oServ:Destroy( 0 )
	oServ := Nil

RETURN cRet

FUNCTION InitCons()

	LOCAL n1

	// HMG_ChangeWindowStyle( fCriaConsulta.Handle, WS_EX_DLGMODALFRAME, NIL, .T., .T. )

	HMG_ChangeWindowStyle( fCriaConsulta .LblTabela1. Handle, WS_EX_STATICEDGE, NIL, .T., .T. )

	fCriaConsulta .LblTabela1. Value := Chr( 13 ) + Chr( 10 ) + hb_ANSIToOEM( "Cria??????o de Consultas" )
	// {'Campo','Operador','Valor','Operador Logico' ,'Editavel','Requerido' , 'P1' , 'Titulo Filtro'}

	FOR n1 := 1 TO 7
		// SetProperty( ThisWindow.name,"GridPar", "HeaderDYNAMICFONT", n1, {|| { "Arial", 8, .T. } } )

		SetProperty( ThisWindow.name, "GridPar", "HeaderDYNAMICFORECOLOR", n1, {|| 78, 78, 78 } )
		SetProperty( ThisWindow.name, "GridPar", "HeaderDYNAMICBACKCOLOR", n1, {||  78, 78, 78   } )

	NEXT

	BT_SCR_INVALIDATERECT( ListView_GetHeader(GetControlHandle( 'br_grid', cFormPrin )) , Nil , .t. )

	//BT_ClientAreaInvalidateAll ( 'fCriaConsulta'	 )


	SysWait(.1)

	//msginfo('ok')

RETURN

FUNCTION InitFilt()
	OBTN_Enable( 'fFiltro', 6602, .t. )

	DECLARE Window fFiltro


	fFiltro .Titulo. SetFocus()


RETURN( NIL )


FUNCTION TabChg()

	OBTN_Enable( 'fCriaConsulta', 6597, ( fCriaConsulta .Tab_1. Value = 2 ) )
	OBTN_Enable( 'fCriaConsulta', 6596, ( fCriaConsulta .Tab_1. Value = 2 ) .AND. ( (GetProperty( 'fCriaConsulta', 'GridPar', 'ItemCount' )  > 0  )   ) )
	OBTN_Enable( 'fCriaConsulta', 6595, ( fCriaConsulta .Tab_1. Value = 2 ) .AND. ( (GetProperty( 'fCriaConsulta', 'GridPar', 'ItemCount' )  > 0  )   ) )

	If ( fCriaConsulta .Tab_1. Value = 3 ) .AND. ( fCriaConsulta .LstOrdem. ItemCount == 1 )

		SetProperty( "fCriaConsulta", "LblOrdem", "Value", Hb_AnsiToOem( 'Selecione a Ordenação da Consulta' ) )

		fCriaConsulta .LstOrdem. DeleteAllitems()
		fCriaConsulta .LstOrdem. AddItem( 'Nenhum' )

		If fCriaConsulta .LstOrdem. ItemCount == 1
			If Len( fCriaConsulta .LstCampos. Value ) > 0
				For n1 := 1 TO Len( fCriaConsulta .LstCampos. Value )
					// Aviso(  aCmps[fCriaConsulta.LstCampos.Value[n1]]    )
					fCriaConsulta .LstOrdem. AddItem(  fCriaConsulta .LstCampos. item( fCriaConsulta .LstCampos. Value[ n1 ] )      )
				Next 
			End If
		End If

		fCriaConsulta .LstOrdem. Value := 1

	End If

RETURN

FUNCTION FiltroAdd()

	LOCAL cVal   := AllTrim( fFiltro.EdtFiltro.Value )

	LOCAL cTabela := AllTrim( fFiltro.lblTabela.Caption )
	
	Local cc1 := ''

	LOCAL cFiltro := ''
	

	LOCAL cCampo := ''

	LOCAL cTipo  := ''

	LOCAL cOperador := Left( AllTrim( fFiltro.CmbOperador.DisplayValue ), 2 )

	LOCAL cOpLogico := AllTrim( fFiltro.CmbLogico.DisplayValue )

	LOCAL cValor := AllTrim( fFiltro.Valor.Value )

	Local nCount1 := GetProperty('fCriaConsulta','GridPar','ItemCount')

    HB_SetCodePage("UTF8")

	cc1 := fFiltro .CmbCampo. item(   fFiltro .CmbCampo.Value  )

	If !lNovoFilt
		If !Empty(alltrim(fFiltro.EdtFiltro.value))
			xFechay()			
			yAviso(hb_ANSIToOEM("Limpe o Filtro antes , Já Existe um Conteudo Presente no Filtro.") , .f.)
			
			
			Return 
	    End If 
    End If 		



	cCampo := Alltrim(Lower( GetInfoDic( cC1, cTabela, 'CAMPO' ) ))
	cTipo  := Alltrim(GetInfoDic( cC1, cTabela, 'TIPO' ))

	If (nCount1 >= 1) .And. (lNovoFilt)
		If Empty(alltrim(fFiltro.EdtFiltro.value)) .And. ;
				(Alltrim(fFiltro.EdtFiltro.value) != "And") .And. ;
				(Alltrim(fFiltro.EdtFiltro.value) != "Or")
			
			xFechay()	
			yAviso(Hb_AnsiToOem("Quando existe mais de um Parametro para a Mesma Consulta." + QUEBRA + "O Segundo Parametro em diante Deve Começar com um op.Logico(And ou Or)." ) , .f. )					
			
			//sysWait(.4)
						
			//Return 
			//msginfo('Erro')
			
			Return
		Else

		

			//msginfo( Str(Len(alltrim(fFiltro.EdtFiltro.value))) )
			If (lFadd)
				xFechay()
				yAviso(hb_ANSIToOEM("Parametro Ja Informado ,Limpe o Filtro ou então Caso queira adicionar outro parametro , " + QUEBRA + "Confirme Esse no 'Ok' e 'Novo Parametro'"),.f.)								
				SysWait(.2)
				Return
			End If

		End If
	Else		

		If (lFadd)
			xFechay()
			yAviso(hb_ANSIToOEM("Parametro Ja Informado ,Limpe o Filtro ou então Caso queira adicione outro parametro , " + QUEBRA + "Confirme Esse no 'Ok' e 'Novo Parametro'"),.f.)						
			
			Return
		End If


	End If

	If ( ( cTipo == 'I' ) .OR. ( cTipo == 'B' ) )

		If IsAlpha( cValor )
			xFechay()
			yAviso( 'Formato Invalido para Tipo Numerico.' , .f. )			
			fFiltro .Valor. Value := ''			
			Return 
		End If

	End If

	If AllTrim( fFiltro .CmbOperador. DisplayValue ) = 'CONTEM'
		If ( cTipo != 'C' )
			xFechay()
			yAviso( "Operador 'CONTEM' funciona apenas com campos Tipo Caracter." , .f. )
			Return 
		End If
	End If

	If ( cTipo == 'C' )
		If AllTrim( fFiltro .CmbOperador. DisplayValue ) != 'CONTEM'
			cFiltro := AllTrim( cCampo ) + ' ' + coperador + ' ' + Chr( 39 ) + AllTrim( cValor ) + Chr( 39 )
		Else 
			cFiltro := AllTrim( cCampo ) + ' LIKE ' + Chr( 39 ) + AllTrim( cValor ) + '%' + Chr( 39 )
		End If
		//msginfo(cFiltro + '  m ' + cValor)
	End If

	If ( cTipo == 'I' ) .OR. ( cTipo == 'B' ) .OR. ( cTipo == 'N' )
		cValor := fFiltro.EdtNum.Value

		If ( cTipo != 'B' )
			cFiltro := AllTrim( cCampo ) + ' ' +  cOperador + ' ' + alltrim(Str(fFiltro.EdtNum.Value))
		Else
			cFiltro := AllTrim( cCampo ) + ' ' +  cOperador + ' ' + alltrim(Str(fFiltro.DoubleEdit.Value,10,2))
		End If

		// msginfo(cFiltro + '  m ' + cValor)
	End If

	If ( cTipo == 'D' )

		// '2018-01-15

		cValor   := DToC( fFiltro .GetData1. Value )
		cValDate := Right( cValor, 4 ) + '-' + SubStr( cValor, 4, 2 ) + '-' + Left( cValor, 2 )
		cFiltro := AllTrim( cCampo ) + ' ' + coperador + ' '  + Chr( 39 ) + cValDate + Chr( 39 )

	End If 



	If (cVal $ "Or.And" )
		fFiltro.EdtFiltro.Value := cVal + Space(1) + cFiltro
	Else
		fFiltro.EdtFiltro.Value := cVal + cFiltro
	End If

	lFadd := .t.

	

Return 

FUNCTION LimpaFilt()

	fFiltro .EdtFiltro. Value := ''
	lFadd := .f.

RETURN


FUNCTION GrvConsul( cTab  , nId1)

	LOCAL oServer
	LOCAL oQuery
	LOCAL NID
	LOCAL nTpVend
	LOCAL cSql := ''
	LOCAL aIt1

	// LOCAL cTabela := 'pedidos'
	LOCAL cTabelax := cTab
	Local cTabDest := AllTrim(hb_OEMToANSI(fCriaConsulta .TituloCons. value))
	//AllTrim(hb_OEMToANSI(fCriaConsulta .TituloCons. value))

	LOCAL cTpOrdem := ""
	LOCAL nQ1      := 0
	LOCAL nQ2      := 0

	LOCAL cCampoORd := ''

	LOCAL l1 := .F.
	LOCAL l2 := .F.

	Local lOkOp := .f.

	LOCAL cSqlx1 := ''
	LOCAL lAscend := fCriaConsulta .ChkOrd1. value

	Default nId1 := -1

	PushButton( cJanx, 6598 )

	For nx5 := 1 TO fCriaConsulta .gridpar. ItemCount

		ait1 := fCriaConsulta .gridpar. Item( nx5 )

		// If nX5 < fCriaConsulta .gridpar. ItemCount
		//    lOkOp := alltrim(ait1[4]) != "Nenhum"
		//   msginfo( alltrim(ait1[4]) )
		// End If

		IF ait1[ 7 ] = '('
			nq1++
			l1 := .T.
		END IF

		IF ait1[ 8 ] = ')'
			nq2++
			IF !l1
				l2 := .T.
			END IF
		END IF

	Next

	If l2
		yaviso( "Parenteses nos Parametros da Consulta devem comecar com ( " , .f.)
		RETURN .F.
	End If

	If ( nQ1 != nQ2 )
		yaviso( "Qtde.de Parenteses '(' e ')' diferem , devem ser o mesmo." , .f. )
		RETURN .F.
	End If

	If Len( fCriaConsulta .LstOrdem. Value ) > 1
		FOR nx := 1 TO  Len( fCriaConsulta .LstOrdem. Value )
			IF AllTrim( fCriaConsulta .LstOrdem. Item(  fCriaConsulta .LstOrdem. Value[ nx ] ) )  = 'Nenhum'
				yaviso(  Hb_AnsiToOem("Em Ordenação dos Campos não pode estar Marcado 'Nenhum',Caso haja Campos Selecionados para Ordenação." ) , .f. )
				RETURN
			ELSE
				cCampoORd += ( AllTrim( fCriaConsulta .LstOrdem. Item(  fCriaConsulta .LstOrdem. Value[ nx ] ) ) + "." )
			END IF
		NEXT
	Else

		IF Len( fCriaConsulta .LstOrdem. Value ) > 0
			IF ( fCriaConsulta .LstOrdem. Value[ 1 ] != 1 )
				cCampoORd := fCriaConsulta .LstOrdem. Item( fCriaConsulta .LstOrdem. Value[ 1 ] )
			END IF
		END IF

	End If



	//SaveBmpDialog('fCriaConsulta' )

	If !Confirmaviso( 'Confirma Cadastro dessa Consulta?' , cActiveJan , .f. )
		//_FechaJan('fCriaConsulta' )
		Return .F.
	End If

	SetWindowCursor( cActiveJan , HOURGLASS )

	//SysWait(.1)


	nTpVend := 1

	nId := GetReg( "consultas"  ,"Id" ) + 1

	If (nId1 > -1)
		nId := nId1
		ExcluiConsulta(nid1)
	End If

	cSql := "Insert into Consultas Values(" + AllTrim( Str( nId ) ) + ","   + AllTrim( Str( nIdEmp ) ) + "," + AllTrim( Str( nTpVend ) ) + ","
	cSql += QuotedStr( AllTrim(hb_OEMToANSI(fCriaConsulta .TituloCons. value))  ) + "," + QuotedStr( AllTrim( hb_OEMToANSI(fCriaConsulta .Obs. value ) ) ) + ","
	cSql +=  QuotedStr( AllTrim( ConvDt( dDataBase ) ) ) + "," + QuotedStr( "Ativo" ) + "," + QuotedStr( cTabelax ) + ")"

	oSErver := GetConexao()
	oQuery := ExecSql( @oServer, cSql )

	hb_MemoWrit( 'Cons1.txt', cSql )

	If oQuery == Nil
		SetWindowCursor( GetFormHandle( 'fCriaConsulta' ) , IDC_ARROW )	
		yaviso( Hb_AnsiToOem("Execução da Rotina sera Interrompida(Cons  Cab). " + QUEBRA + "Contacte Suporte.") , .f. )
		RETURN .F.
	End If

	oQuery:Destroy()
	oQuery := Nil

	oServer:Destroy()
	oServer := Nil

	hb_MemoWrit( 'InsCons1.txt', cSql )

	//msginfo( cTabelaX )

	//yAviso( "Houve Falha no processo de Grava??????o no Dicionario de Dados."  )


	If !GravaDic( nId  , cTabelax )
		SetWindowCursor( GetFormHandle( 'fCriaConsulta' ) , IDC_ARROW )	
		yAviso( Hb_AnsiToOem("Houve Falha no processo de Gravação no Dicionario de Dados." ) , .f.  )
		Return
	End If

	For nX1 :=  1 TO Len( fCriaConsulta .LstCampos. Value )

		cCampo := fCriaConsulta .LstCampos. item( fCriaConsulta .LstCampos. Value[ nx1 ] )

		cOrdem := ""
		cTpOrdem := ""



		If ( AllTrim( cCampo ) $ cCampoOrd ) .OR. ;
				( AllTrim( cCampo ) = AllTrim( cCampoOrd ) )

			cOrdem := "S"
			cTpOrdem := "Asc"

			If lAScend
				cTpOrdem := "Desc"
			End If

		End If

		nIdCampo :=  Val( GetInfoDic( AllTrim( cCampo ),  Alltrim(cTabX)  , 'ID' ) )


		cSqlx1 := "Insert into conscampos values(" + AllTrim( Str(  nId  ) ) + "," + AllTrim( Str(  nIdCampo  ) )  + "," + QuotedStr( cOrdem ) + ","
		cSqlx1 +=  QuotedStr( cTpOrdem )  + ")"

		hb_MemoWrit( 'ConsCampos.txt', cSqlx1 )

		oSErver := GetConexao()
		oQuery := ExecSql( @oServer, cSqlx1 )

		IF oQuery == Nil
			SetWindowCursor( GetFormHandle( 'fCriaConsulta' ) , IDC_ARROW )	
			yAviso( Hb_AnsiToOem("Execução da Rotina sera Interrompida(Cons  item).") + QUEBRA + "Contacte Suporte." , .f. )
			RETURN
		END IF

		oQuery:Destroy()
		oQuery := Nil

		oServer:Destroy()
		oServer := Nil

		hb_MemoWrit( 'InsItem.txt', cSqlx1 )

	NEXT

	FOR nx1 := 1 TO fCriaConsulta .gridpar. ItemCount

		aIt1 := fCriaConsulta .gridpar. Item( nx1 )

		// cTipo  := GetInfoDic( aIt1[1], cTabela, 'TIPO' )
		cIdCampo := GetInfoDic( alltrim(aIt1[ 1 ]), cTabDest  , 'ID' )


		cSqlx1 := "Insert Into ConsParametros values(" + AllTrim( Str( nId ) ) + "," + AllTrim(  cIdCampo  ) + "," +  AllTrim( Str( nX1 ) ) + "," +   Quotedstr( aIt1[ 2 ] ) + ","
		cSqlx1 +=  Quotedstr( aIt1[ 3 ] ) + "," + Quotedstr( aIt1[ 4 ] )  + "," + Quotedstr( Left( aIt1[ 5 ],1 ) ) + "," +  Quotedstr( Left( aIt1[ 6 ],1 ) ) + "," + Quotedstr( aIt1[ 7 ] ) + "," + Quotedstr( aIt1[ 8 ] ) +  ")"

		oSErver := GetConexao()
		oQuery := ExecSql( @oServer, cSqlx1 )

		hb_MemoWrit( 'ConsParam.txt', cSqlx1 )

		IF oQuery == Nil
			SetWindowCursor( GetFormHandle( 'fCriaConsulta' ) , IDC_ARROW )	
			yAviso( hb_ANSIToOEM("Execução da Rotina sera Interrompida(Cons  item).") + QUEBRA + "Contacte Suporte." ,  .f. )
			RETURN .F.
		END IF

		oQuery:Destroy()
		oQuery := Nil

		oServer:Destroy()
		oServer := Nil

	NEXT

	lREtOk2 := .T.
	lOk     := .t.


	//SetWindowCursor( GetFormHandle( 'fCriaConsulta' ) , IDC_ARROW )	



RETURN .T.


Function GravaDic( nIdConsul  ,cTabOri)

	Local cSql := "select * from consultas "
	//local oServer
	Local oQuery
	Local cTabelax := AllTrim(hb_OEMToANSI(fCriaConsulta .TituloCons. value))
	Local cAlias := "Cons"
	Local nId    := GetReg( "dicionario"  ,"iddicionario" ) + 1
	Local nTam
	Local cCampo
	Local aTipo
	Local aSistema
	Local aRelacao

	Local aMascara
	Local aCampoReal
	Local nORdem := 1
	Local oServer


	//yAviso( "Execu??????o da Rotina sera Interrompida(Cons  item)." + QUEBRA + "Contacte Suporte." , .f. )

	oSErver := GetConexao()

	FOR Nx1 :=  1 TO Len( fCriaConsulta .LstCampos. Value )

		cCampo := fCriaConsulta .LstCampos. item( fCriaConsulta .LstCampos. Value[ nx1 ] )

		aTipo := GetCamposInf( cTabOri  , 'TIPO'  , Alltrim(cCampo) )
		aTam := GetCamposInf( cTabOri  , 'TAM'  , Alltrim(cCampo) )
		aMascara := GetCamposInf( cTabOri  , 'MASCARA'  , Alltrim(cCampo) )
		aRelacao := GetCamposInf( cTabOri  , 'RELACAO'  , Alltrim(cCampo) )
		aSistema := GetCamposInf( cTabOri  , 'SISTEMA'  , Alltrim(cCampo) )

		cSql := "Insert into Dicionario Values(" + alltrim(Str( nId )) + "," +;
			QuotedStr( HB_OemtoAnsi(cTabelax)) + "," + ;
			QuotedStr( HB_OemtoAnsi( aSistema[1] )) + "," + ;
			QuotedStr( HB_OemtoAnsi(aTipo[1])) + "," + ;			
			QuotedStr(  cCampo) + "," + ;
			QuotedStr( 'S' ) + "," + ;
			alltrim(Str(aTam[1]))+"," + ;
			QuotedStr( HB_OemtoAnsi(amascara[1])) + "," + ;
			QuotedStr( HB_OemtoAnsi(aSistema[1])) + "," + ;
			alltrim(Str(nordem))+"," + ;
			QuotedStr( HB_OemtoAnsi(arelacao[1]))  + "," +;
			alltrim(Str(nIdConsul) )   + ")"

		oQuery := ExecSql( @oServer, cSql )

		hb_MemoWrit( 'ConsInsert.txt', cSql )

		If oQuery == Nil
			yAviso( "Execuçãoo da Rotina sera Interrompida(Cons  item)." + QUEBRA + "Contacte Suporte." , .f. )
		

			RETURN .F.

		End If


		nId++
		nOrdem++

	Next

	oServer:Destroy()
	oServer := Nil



Return .t.


Function SaveBmpDialog( cJanela1 )

	hBit20 := BT_BitmapCaptureWindow ( cJanela1, 0 , 0 , GetProperty(cJanela1,'Width')  , GetProperty(cJanela1,'Height') )
	BT_BitmapSaveFile (hBit20  , "hBit20.bmp")

Return

FUNCTION Aviso( cMsg )

	MsgInfo( cMsg )

RETURN


FUNCTION Proc_Cadastro( cTexto,cJanela)

	LOCAL hDC, BTstruct, hDc2, BTstruct2

	Local nTypeText    := BT_TEXT_TRANSPARENT + BT_TEXT_BOLD
	Local nAlingText   := BT_TEXT_LEFT + BT_TEXT_TOP
	Local nOrientation := BT_TEXT_NORMAL_ORIENTATION

	LOCAL hBitmap, aRGBcolor := { 9, 111, 137 }

	//LOCAL Width  := BT_ClientAreaWidth  ( ThisWindow.Name ) - 4
	LOCAL Height := 25
	Local n1

	Local nRow := 0
	Local nCol := 0

	Local nl1 := 0
	Local nl2 := 0

	//Local cJan := cJanela
	Local cJan
	LOCAL hBitMap5

	Local Width  := BT_ClientAreaWidth  (cJanela)

	hDC    = BT_CreateDC ( cJanela  , BT_HDC_INVALIDCLIENTAREA, @BTstruct)

	BT_DrawGradientFillVertical (hDC,  1 ,  1 ,  Width ,  Height ,  { 9, 111, 137 } , BLACK)              //

	BT_DrawText ( hDC, 07  , 35,  hb_ANSIToOEM( cTexto ), "Arial", 9, WHITE,  BLACK, nTypeText, nAlingText, nOrientation )

	//BT_DrawGradientFillVertical ( hDC ,  225 ,  0 , 571 ,  100 ,   { 238,238,238}, {  244,244,244 } )

	BT_DeleteDC (BTstruct )


Return


FUNCTION Proc_Paint( cTexto, cBitmap  , z1Bitmap , cJanela)

	LOCAL hDC, BTstruct, hDc2, BTstruct2

	LOCAL hBitmap
	Local aRGBcolor := { 9, 111, 137 }

	LOCAL Width  := BT_ClientAreaWidth  ( ThisWindow.Name ) - 4
	LOCAL Height := 25
	Local n1

	Local nRow := 0
	Local nCol := 0

	Local nl1 := 0
	Local nl2 := 0

	//Local cJan := cJanela
	Local cJan
	LOCAL hBitMap5

	Default cJanela := ''

	DEFAULT cBitMap := ''

	cJan := cJanela

	IF !Empty( cBitMap )
		hBitmap5 := BT_BitmapLoadFile ( cBitmap )
	END IF

	hBitmap := BT_BitmapCreateNew ( Width,  Height, aRGBcolor )

	hDC := BT_CreateDC ( hBitmap, BT_HDC_BITMAP, @BTstruct )

	BT_DrawGradientFillVertical ( hDC,  0,  0,  Width, 30, aRGBcolor , BLACK )




	nTypeText    := BT_TEXT_TRANSPARENT + BT_TEXT_BOLD
	nAlingText   := BT_TEXT_LEFT + BT_TEXT_TOP
	nOrientation := BT_TEXT_NORMAL_ORIENTATION


	If Alltrim(cTexto) != "Aviso"
		BT_DrawText ( hDC, 07  , 195 ,  hb_ANSIToOEM( Alltrim(cTexto) ), XFONT1, 9, WHITE,  BLACK, nTypeText, nAlingText, nOrientation )
	End If




	BT_DeleteDC ( BTstruct )

	hDC2 := BT_CreateDC ( ThisWindow.Name, BT_HDC_INVALIDCLIENTAREA, @BTstruct2 )

	BT_DrawBitmapTransparent ( hDC2,  2, 2, Width, Height, BT_COPY,  hBitmap, NIL )


	If (alltrim(cTexto) == 'Parametros Consulta')
		If Len(aLinhas) > 1

			nL1 := aLinhas[1]
			nl2 := aLinhas[ Len(aLinhas) ]
			For n1 := 1 to Len(aLinhas)
				BT_DrawLine (hDC2  , aLinhas[n1]  , 0 ,  aLinhas[n1] , Width , {0,0,0} , 1)
			Next

			BT_DrawLine (hDC2  , nL1  , 22 ,  nl2, 22 , {0,0,0} , 1)

		End If
	End If


	IF (!Empty( cBitMap )) .And. (cActiveJan != 'fDialog')
		//BT_DrawBitmap ( hDC2, 3, 2, 24, 24, BT_STRETCH, hBitmap5 )
	Else


		If (cActiveJan = 'fDialog')
			BT_DrawGradientFillVertical ( hDC2 ,  175 ,  0 , 571 ,  100 ,   { 238,238,238}, {  244,244,244 } )
		End If

	End iF

	BT_DeleteDC ( BTstruct2 )

RETURN



FUNCTION xInitMov(  nIdc1, nTpVnd9, cTabelax, lMvTable, cJanName )

	LOCAL aCabec   := {}
	LOCAL aFieldsx := {}
	LOCAL nid := nIdc1
	LOCAL oQuery
	LOCAL aFlt := {}
	LOCAL oServer := GetConexao()
	LOCAL aLabels := {}
	LOCAL aValues := {}
	LOCAL aFormats := {}
	LOCAL aE1      := {}
	LOCAL aR1      := {}
	LOCAL cFiltro := ''
	LOCAL aFiltro := {}
	LOCAL aRelacao := {}
	LOCAL aTipos := {}
	LOCAL aMask := {}
	LOCAL aTam := {}
	Local aTams := {}

	//Local cTabName :=

	Local lRt1 := .f.

	Local aOper := {}
	Local cp1 := ''
	Local cp2 := ''

	// LOCAL aCabec := {}
	LOCAL nQReg := 0

	LOCAL cOperador := ''

	LOCAL cTp1 := RetSql( "select descricao from consultas where id = " + AllTrim( Str( nId ) ) )

	LOCAL cSqlx := "select relacao,camposistema,tipo,campo,mascara,tamdisp,consparametros.* from consparametros,dicionario where idconsul = " + AllTrim( Str( nId ) )

	//msginfo(cTp1)

	DEFAULT lMvTable := .F.
	DEFAULT cJanName := ''

	//msginfo('xini')

	//cTabelax := cTp1

	//cSqlx += " and iddicionario = idcampo and tabela = " + QuotedStr( cTabelax ) + " order by itemOrdem "

	cConsuAtiva := cTp1

	cSqlx += " and iddicionario = idcampo and tabela = " + QuotedStr( cTp1 ) + " order by itemOrdem "

	hb_MemoWrit( 'Sql\SqlConsulta.txt', cSqlx )

	oQuery := oServer:Query( cSqlx )

	aTam := {}
	aCabec := {}

	FOR n1 := 1 TO oQuery:LastRec()

		oRow := oQuery:GetRow( n1 )

		cTpcampo := AllTrim( GetCampo( oRow, 'tipo' ) )
		cRelacao := AllTrim( GetCampo( oRow, 'relacao' ) )

		cOperador := Left(AllTrim( GetCampo( oRow, 'operador' ) ),2)

		If cOperador = 'Co'
			cOperador := ' Contem '
		End If


		cName := 'Control_' + AllTrim( Str(  n1 ) )
		lEnabled   := ( GetCampo( oRow, 'editavel' ) = 'S' )

		lRequerido := ( GetCampo( oRow, 'requerido' ) = 'S' )

		If  !Empty(Alltrim(GetCampo( oRow, 'oplogico' )) )

			cOpLogic := ''

			If alltrim(GetCampo( oRow, 'oplogico' )) == 'E(AND)'
				cOpLogic := ' E '
			End If

			If alltrim(GetCampo( oRow, 'oplogico' )) == 'OU (OR)'
				cOpLogic := ' OU '
			End If

			// msginfo(cOplogic)

			Aadd(aOper ,cOpLogic )

			// msginfo( GetCampo( oRow, 'oplogico' ) )
		End If

		AAdd( aFiltro, { AllTrim( GetCampo( oRow, 'campo' ) ),  GetCampo( oRow, 'tipo' ),  AllTrim( GetCampo( oRow, 'operador' ) ), ;
			GetCampo( oRow, 'oplogico' ), GetCampo( oRow, 'parentese' )  ,  GetCampo( oRow, 'parentese2' ) } )

		AAdd( aE1, { cName, lEnabled    } )
		AAdd( aR1, { cName, lRequerido, AllTrim( GetCampo( oRow, 'tipo' ) )  } )

		AAdd( aRelacao, cRelacao )

		IF cTpCampo = 'C'


			AAdd( aLabels, AllTrim( GetCampo( oRow, 'camposistema' ) ) + ' ' + AllTrim( coperador ) )
			AAdd( aValues, GetCampo( oRow, 'valor' ) )

			AAdd( aTams , GetCampo( oRow, 'tamdisp' ) )



			AAdd( aFormats, {   120 ,  'TX',,, 'BOLD' } )

		END IF

		IF cTpCampo = 'D'

			AAdd( aLabels, AllTrim( GetCampo( oRow, 'camposistema' ) ) + ' ' + AllTrim( coperador ) )
			AAdd( aValues, CToD( GetCampo( oRow, 'valor' ) ) )
			AAdd( aFormats, { 235, 'DP',,, 'BOLD' } )

			AAdd( aTams , GetCampo( oRow, 'tamdisp' ) )

		END IF

		IF cTpCampo = 'I'

			AAdd( aLabels, AllTrim( GetCampo( oRow, 'camposistema' ) ) + ' ' + AllTrim( coperador ) )
			AAdd( aValues, GetCampo( oRow, 'valor' ) )
			AAdd( aFormats, {, 'TN', 50,, 'BOLD' } )

			AAdd( aTams , GetCampo( oRow, 'tamdisp' ) )

		END IF

		IF ( cTpCampo = 'N' ) .OR. ( cTpCampo = 'B' )

			AAdd( aLabels, AllTrim( GetCampo( oRow, 'camposistema' ) ) + ' ' + AllTrim( coperador ) )
			AAdd( aValues, iif( Val(GetCampo( oRow, 'valor' ) ) = 0,0.00, Val(GetCampo( oRow, 'valor' ) )  )  )
			AAdd( aFormats, { 220, 'TN', 80,, '9 999,999,999.99' } )
			AAdd( aTams , GetCampo( oRow, 'tamdisp' ) )

		END IF

	NEXT

	oQuery:Destroy()
	oQuery := Nil

	oServer:Destroy()
	oServer := Nil

	aRes1 := InputWindowEx( 'Parametros Consulta - ' + StrZero( nIdC1,3 ), ;
		aLabels, ;
		aValues, ;
		aFormats,,, .T., , {|| CdBlock(  aE1, aR1  ) }, aRelacao  ,    { || xValid( aR1  , aLabels) } , aOper , aTams  )


	// IF aRes1[ 1 ] == Nil

	If Len(aRes1) > 0
		IF ( aRes1[ 1 ] == Nil )
			yaviso( 'Sera Necessario Preencher os Parametros para Prosseguir.' , .f. )
			Return .f.
		END IF
	Else

		yAviso( Hb_AnsiToOem('Parametros Não Localizados, Recrie a Consulta.') , .f.)
		Return .f.

	End If


	FOR nx1 := 1 TO Len( aFiltro )

		cOp1 := AllTrim( Left( aFiltro[ nx1 ][ 3 ],2 ) )
		cTipo := aFiltro[ nx1 ][ 2 ]

		cOpLogico := AllTrim( aFiltro[ nx1 ][ 4 ] )

		// msginfo(cOpLogico)

		cFiltro := ''

		IF ( AllTrim( aFiltro[ nx1 ][ 3 ] ) = 'Contem' )
			cOp1 := "LIKE"
		END IF

		// If aFiltro[nx1][3]

		cOpLogic := ''

		IF ( !Empty(AllTrim( cOpLogico ))  ) // .And. ( nx1 != 1 )
			// msginfo('ok')
			IF   ( AllTrim( cOpLogico ) == 'And' )
				cOpLogic := " And "
			ELSE
				cOpLogic := " Or "
			END IF
		END IF

		cp1 := cOpLogic + ' ' + alltrim(aFiltro[ nx1 ][ 5 ])
		cp2 := alltrim(aFiltro[ nx1 ][ 6 ])


		IF ( cTipo = 'C' )
			IF cOp1 != "LIKE"
				cFiltro :=  cp1 + aFiltro[ nx1 ][ 1 ] + " " + cOp1 + " " + QuotedStr( AllTrim( aRes1[ nx1 ] ) )
			ELSE
				cFiltro :=  cp1 + aFiltro[ nx1 ][ 1 ] + " LIKE " + QuotedStr( AllTrim( aRes1[ nx1 ] ) + '%' )
			END IF
		END IF

		IF ( cTipo = 'I' )
			cFiltro :=   cp1 + aFiltro[ nx1 ][ 1 ] + " " + cOp1 + " " +  AllTrim( Str( aRes1[ nx1 ] ) )
		END IF

		IF ( cTipo = 'N' ) .OR. ( cTipo = 'B' )
			cFiltro :=  cp1 + aFiltro[ nx1 ][ 1 ] + " " + cOp1 + " " +  AllTrim( Str( aRes1[ nx1 ],10,2 ) )
			// msginfo(cFiltro)
		END IF

		IF ( cTipo = 'D' )
			cValor   := DToC( aRes1[ nx1 ] )
			cValDate := Right( cValor, 4 ) + '-' + SubStr( cValor, 4, 2 ) + '-' + Left( cValor, 2 )

			cFiltro :=  cp1+aFiltro[ nx1 ][ 1 ] + " " + cOp1 + " " + QuotedStr( cValDate )
		END IF

		cFiltro += cp2
		AAdd( aFlt, cFiltro )

		//Msginfo( cFiltro )

	NEXT

	cSqlx := "select mascara,tipo,tamdisp,camposistema,campo,conscampos.* from conscampos,dicionario where conscampos.idconsulta = " + AllTrim( Str( nId ) )
	cSqlx += " and iddicionario = idcampo order by ordem"

	oServer := GetConexao()
	oQuery  := oServer:Query( cSqlx )

	hb_MemoWrit( 'Sqlc2.txt', cSqlx )

	cSql1 := "Select @row_number:=@row_number+1 AS row_number,"
	cSql1 := "Select "
	cOrdem := ""
	cAsc   := ""


	aCabec := {}
	aTipos := {}
	aMask  := {}
	aTam   := {}

	If (oQuery:LastRec() = 0)
		yAviso("Houve um erro ao Recuperar Campos da Consulta,Contacte Suporte." , .f. )
		oQuery:Destroy()
		oQuery := Nil

		oServer:Destroy()
		oServer := Nil
		Return .f.

	End If

	FOR n1 := 1 TO oQuery:LastRec()

		oRow := oQuery:GetRow( n1 )

		cTipo := GetCampo( orow, 'Tipo' )


		If (cTipo <> 'C')
			If (cTipo = 'D')
				cSql1 += "lPad(Date_Format(" + AllTrim( GetCampo( orow, 'campo' ) ) + ", '%d/%m/%Y'),20,' ')  As " +  alltrim( GetCampo( orow, 'campo' ) ) + " ,"
			Else

				cSql1 += "ifNull(" + AllTrim( GetCampo( orow, 'campo' ) ) + " ,0 ) As " +  alltrim(GetCampo( orow, 'campo' )) + " ,"

			End If
		Else

			If GetCampo( orow, 'tamdisp' ) != 1
				cSql1 += AllTrim( GetCampo( orow, 'campo' ) ) + ","
			Else
				cSql1 += "lPad(" + AllTrim( GetCampo( orow, 'campo' ) ) +  ",30,' ')  as " + alltrim( GetCampo( orow, 'campo' ) ) + ","
			End If


		End If


		//cSql1 += AllTrim( GetCampo( orow, 'campo' ) ) + ","

		AAdd( aCabec, hb_ANSIToOEM( GetCampo( orow, 'camposistema' )  ) )

		//msginfo(  hb_ANSIToOEM( GetCampo( orow, 'camposistema' )  ) )
		AAdd( aTam, GetCampo( oRow, 'tamdisp' ) )



		IF ( GetCampo( orow, 'tipo' ) == 'C' )
			AAdd( aFieldsx, "hb_ansiToOem(" + AllTrim( GetCampo( orow, 'campo' ) ) + ")" )
		ELSE
			AAdd( aFieldsx, AllTrim( GetCampo( orow, 'campo' ) ) )
		END IF



		AAdd( aTipos, GetCampo( oRow, 'tipo' ) )
		AAdd( aMask, GetCampo( oRow, 'mascara' ) )

		IF GetCampo( orow, 'ordenado' ) == 'S'

			cOrdem += AllTrim( GetCampo( orow, 'campo' ) ) + ","

			IF AllTrim( GetCampo( orow, 'campo' ) ) == 'Desc'
				cAsc := "Asc"
			END IF

		END IF

	NEXT

	//cSql1 += "a.status "

	cSql1 := Left( cSql1, Len( cSql1 ) -1 )

	IF lMvTable
		cSql1 += " from " + cTabelax + " c " + GetJoinTab( cTabelax ) + " where (idfilial = " + AllTrim( Str( nIdEmp ) ) + ") and (Idtpvend = " + AllTrim( Str( nTpVnd9 ) ) + ") and "
	ELSE
		cSql1 += " from " + cTabelax + " a " + GetJoinTab( cTabelax ) + iif( Len( aFlt ) > 0, " where ", "" )
	END IF

	//cTituloCon += '  '

	FOR p := 1 TO Len( aFlt )
		cSql1 += aFlt[ p ]
		//cTituloCon += aFlt[ p ]
	NEXT

	IF !Empty( cOrdem )
		cSql1 += " Order by " + Left( cOrdem, Len( cOrdem ) -1 )   + " " + cAsc
	END IF

	hb_MemoWrit( 'Sqly15.txt', cSql1 )

	// WaitMsg( "Aguarde..", {||  nQreg := EncheGrid( cSql1,  .T., aCabec, aTam, aTipos, aMask ) } )

	// SetProperty( ThisWindow.name, "LblqReg", "Value",  AllTrim( Str(nQReg ) )  )

	oQuery:Destroy()
	oQuery := Nil

	oServer:Destroy()
	oServer := Nil

	// SysWait(.2)

	cSqlConsulta := cSql1

	lRt1 := BrowConsulta( cSql1, aCabec, @aTam, @aFieldsx, cJanName  ,aTipos  , ' ['  + alltrim(cTp1) + ']' )


RETURN lRt1

Function ExcluiConsulta(nId1)

	LOCAL oServer := GetConexao()

	oSErver:Query("delete from consultas where id = " + alltrim(Str(nId1)) )
	oSErver:Query("delete from consparametros where idconsul = " + alltrim(Str(nId1)) )
	oSErver:Query("delete from conscampos where idconsulta = " + alltrim(Str(nId1)) )
	oSErver:Query("delete from dicionario where idconsulta = " + alltrim(Str(nId1)) )

	oServer:Destroy()

Return  .t.


FUNCTION BrowConsulta( cSqlp, aCabecario, aTamanhos, aCampos, cJanx1  , aTps , cTitle )

	LOCAL cForm :=  cJanx1
	LOCAL aBckColor := {}
	LOCAL aFckColor := {}
	LOCAL nJ
	Local aItens    := {}
	Local aCabex    := {}
	Local cType
	Local aM12      := {}

	Local cTitulo := ''

	local cGridname := 'Br_grid'

	local lOk1 := .t.


	LOCAL oServer := GetConexao()

	PRIVATE bGrid1 := {}
	PRIVATE bGrid2 := {}

	Default cTitle := ''

	//PRIVATE ColorGrid := {7,101,125}
	//{ 210, 240, 255 }

	PRIVATE aJustify := {}

	//PRIVATE bColorGridDb := {|| iif(  This.CellRowIndex = 1, { 78,78,78 },   iif( This.CellRowIndex / 2 <> Int( This.CellRowIndex / 2 ), ColorGrid, { 255,255,255 } )  )  }

	//PRIVATE fColorGridDb := {|| iif(  This.CellRowIndex = 1, { 255,255,255 },   { 255,255,255 }   ) }

	PRIVATE fColorGrid := {|| iif(  This.CellRowIndex = 1, {255,255,255}  , { 78,78,78 }     )}


	PRIVATE bColorGrid := {|| iif( This.CellRowIndex / 2 <> Int( This.CellRowIndex / 2 ), { 241,241,241 }, {255,255,255}  ) }



	PRIVATE aFont := ARRAY FONT "Calibri" SIZE 10 BOLD ITALIC


	//PRIVATE cAlias := "T" + Left( cJanx1, 3 )

	Private calias := "Tmp"

	IF Select( cAlias ) > 0
		dbSelectArea( cAlias )
		USE
	END IF

	nConnection := RDDINFO( RDDI_CONNECT, { "MYSQL", cServer , cUserDb , cPassDb , "sisdb"} )


	If nConnection = 0
		yAviso("Unable connect to the server!"+Chr(13)+Chr(10)+Str(RDDINFO( RDDI_ERRORNO ))+Chr(13)+Chr(10)+RDDINFO( RDDI_ERROR  , .f. ))
		Return nConnectionInfo := 1 // 0 in nLogin means Mediator is sucessfully logged
	End If


	dbUseArea( .T.,,  cSqlp, cAlias )
	dbSelectArea( cAlias )
	dbGoTop()

	If _IsControlDefined( "br_Main",  cForm )
		DoMethod( cForm, "br_Main", "Release" )
	End If


	cAlias := "tmp"

	If (Select(calias) > 0)
		dbSelectArea( cAlias )
		Use
	End If




	dbUseArea( .T.,,  cSqlp, cAlias )
	dbSelectArea( cAlias )
	dbGoTop()

	If ( RecCount() == 0 )

		Yaviso( Hb_AnsiToOem("Consulta Não Retornou Registros.") , .f. )
		lOk1 := .f.
		
	Else
		
	End If


	
	aItens := {}

	While !Eof()

		aM1 := {}

		For n1 := 1 TO FCount()

			cType := aTps[n1]

			//msginfo( fieldname(n1) +'   ' + str(aTamanhos[n1]) )

			If aTamanhos[n1] <= 1
				aTamanhos[n1] := 120
			End If

			If (cType $ 'B.N')


				nTam1 := 120

				cValor := PadL(alltrim(Transform( FieldGet(n1) , "@E 999,999,999.99" )),19)

				If cTYpe = 'N'
					cValor :=  Alltrim(Str( FieldGet(n1) )  )
				End If

				Aadd(aM1 , cValor )

			Else
				AAdd( aM1, alltrim(hb_ANSIToOEM( &(FieldName(n1 ))  ))   )
			End If

		Next


		AAdd( aItens, aM1 )
		dbSkip()

	Enddo


	//SysWait(.4)

	If _IsControlDefined(cGridname , cFormPrin )
		_ReleaseControl( cGridname , cFormPrin )
	End If

	bGrid1 := {}
	bGrid2 := {}


	nColl   := 5
	//10
	nSeqx   := 345

	nTotw1 := 0

	aM2 := {}

	For n2 := 1 TO Len(aTps)

		Aadd(aM2 , {  nColL , aTamanhos[n2]  , Alltrim(aCabecario[n2])  } )
		nColL  += aTamanhos[n2]
		nTotW1 += aTamanhos[n2]

	Next

	aMtrHeader := Aclone(aM2)

	nTotWidth  := nTotW1

	For nx2 := 1 TO Len(aCabecario)
		AAdd( bGrid1, bColorGrid  )
		AAdd( bGrid2, fColorGrid )
	Next

	DbGotop()

	Private aZCol := {}

	//Private n2 := 1

	nI := 0
	n2:=1
	

	_HMG_SYSDATA [ 348 ] := {255,255,255}
	_HMG_SYSDATA [ 349 ] := {28,157,189}
	_HMG_SYSDATA [ 350 ] := {255,255,255}
	_HMG_SYSDATA [ 351 ] := {28,157,189}

	//EventRemove(nIndexEve1)

	//msginfo('pl')



	//270
	@ 54 , 184 GRID &cGridName ;
		OF &cJanx1 ;
		WIDTH GetDeskTopWidth() ;
		HEIGHT GetDeskTopHeight() - 195 ;
		NOLINES ;
		HEADERS aCabecario ;
		FONT 'Arial' SIZE 9;
		ITEMS aItens ;
		FONTCOLOR { 78, 78, 78 } ;
		JUSTIFY aJustify ;
		CELLNAVIGATION ;
		WIDTHS aTamanhos ;
		BACKCOLOR {255,255,255} ;
		DYNAMICBACKCOLOR bGrid1



	SetProperty( cJanx1  , cGridName , "PaintDoubleBuffer" , .t.)

	If aTps[1] $ "BN"
		SetProperty(cJanx1, cGridName , "COLUMNDYNAMICFONT" ,  1 , {|| ARRAY FONT "Arial" SIZE 8 BOLD   } )
	End If

	For nz1 := 2 to Len(aTps)

		If (aTps[nz1] $ "BN")
			SetProperty(cJanx1, cGridName , "COLUMNDYNAMICFONT" ,  nZ1 , {|| ARRAY FONT "Courier New" SIZE 9 BOLD   } )
		End If

		If aCabecario[nz1 - 1] = 'Codigo'
			SetProperty(cJanx1, cGridName , "COLUMNDYNAMICFONT" ,  nZ1 - 1 , {|| ARRAY FONT "Arial" SIZE 9 BOLD   } )
		End If


	Next

	//nTotWidth := 0
	l1        := 0



	nQRegx     := TMP->(Reccount())
	//Bt_ClientAreaInvalidateAll( cJanx1 )


	DoMethod('main','SetFocus')

	DoMethod(cjanx1,'SetFocus')
	DoMethod(cjanx1, cgridname, 'Refresh')


	EventProcessAllHookMessage(EventCreate({ || LabelEventH4() },   ListView_GetHeader(GetControlHandle( 'br_grid', cJanx1  ))   ), .T.)

	SetProperty(cjanx1, cgridname, "Value" , 1)
	HMG_ChangeWindowStyle(GetControlHandle( cgridname  , cJanx1 )   , NIL, WS_BORDER  ,  .F., .T.)

	SetProperty( cFormPrin , 'lblQtReg' , 'Value' , Alltrim( Transform(   Len(aItens) , '@E 999,999,999'   ))         )

	cTitulo := GetProperty( cFormPrin , 'LblTitulo' , 'Value' )



	SetProperty( cFormPrin , 'LblTitulo' , 'Value' ,  Alltrim(cTitulo) + " " + Alltrim(cTitle)  )

	xRefresh()



RETURN lOk1


Function xConsBmp( aM12 , nWidth1)

	Local Width := GetProperty(cBrowName , "Width" )+3
	LOCAL BTstruct

	local nH1 := 28

	Local hBitmap := BT_BitmapCreateNew ( nWidth1 , nH1 , {255,255,255} )
	Local nColx

	// Create hDC to a bitmap
	Local hDC := BT_CreateDC (hBitmap, BT_HDC_BITMAP, @BTstruct)



	Local nTypeText    := BT_TEXT_TRANSPARENT +  BT_TEXT_BOLD
	Local nPos1
	//+ BT_TEXT_BOLD
	Local nAlingText   := BT_TEXT_CENTER + BT_TEXT_TOP
	Local nOrientation := BT_TEXT_NORMAL_ORIENTATION
	Local nPos3
	Local nText

	BT_DrawGradientFillVertical (hDC,  1  ,  1  ,  width ,   nH1   ,  ;
		Corg1 , cOrg2 )

	nCol1:=0

	nColx := aM12[1][1]+15

	For n1 := 1 to Len(aM12)

		BT_DrawRectangle (hDC, 1, aM12[n1][1]+1 , aM12[n1][2] , nH1 , GRAY, 1)

		If n1 > 1
			nColx :=  aM12[n1 - 1][2] + aM12[n1 - 1][1] + 3
			//+10
		End If

		BT_DrawText ( hDC, 2 ,nColx+40 ,  alltrim(aM12[n1][3])   , XFONT1, 9 , WHITE,  BLACK, nTypeText, nAlingText, nOrientation )

		nCol1 += aM12[n1][2]

	Next

	//BT_BitmapSaveFile (hBitmap, "Cabec2.bmp")

	BT_HMGSetImage (cBrowName , "ImgCabec",   hBitmap , .t.)
	BT_DeleteDC (BTstruct)


Return hBitMap





FUNCTION PrepareGrid()

	bGrid1 := {}
	bGrid2 := {}
	aJustify := {}

	FOR n2 := 2 TO FCount()

		//AAdd( aJustify, GRID_JTFY_RIGHT )

		If n2 == 1
			AAdd( aJustify, GRID_JTFY_CENTER )
		Else
			AAdd( aJustify, GRID_JTFY_LEFT )
		End If

		AAdd( bGrid1, bColorGrid  )
		AAdd( bGrid2, fColorGrid )

	NEXT

RETURN


Function xValid( aMtr1 , aLabelx )
	Local lOk := .t.

	LOCAL n2
	Local vValor
	Local cType

	For n2 := 1 TO Len( aMtr1 )

		If aMtr1[ n2 ][ 2 ]

			cType  := aMtr1[ n2 ][ 3 ]
			vValor := _GetValue ( aMtr1[ n2 ][ 1 ]  , '_InputWindow' )

			If (cType == 'I') .and. (lOk)

				If (vValor = 0)

					xStop( aMtr1[ n2 ][ 1 ] , aLabelx[n2] )
					lOk := .f.

				End If

			End If

			If (cType == 'C') .and. (lOk)

				If Empty(alltrim(vValor  , aLabelx[n2] ))
					xStop( aMtr1[ n2 ][ 1 ] , aLabelx[n2] )
					lOk := .f.
				End If

			End If

			If (cType == 'D') .and. (lOk)

				If (vValor == Ctod('  /  /    '))
					xStop( aMtr1[ n2 ][ 1 ] , aLabelx[n2] )
					lOk := .f.
				End If

			End If

		End If
	Next

Return lOk

Function xStop( cObj ,cCampo )

	SetProperty( '_InputWindow', cObj  , 'BackColor', RED )

	PlayBeep()
	yAviso( 'Este campo deve estar Preenchido(' + Left(cCampo, Len(cCampo) - 2  ) + ')' + QUEBRA + 'Para que a consulta possa ser executada. ' , .f. )

	SetProperty( '_InputWindow', cObj  , 'BackColor', WHITE )

	DoMethod( '_InputWindow', cObj ,'SetFocus' )

Return


FUNCTION CdBlock( aMe1, aRe1 )

	// msginfo('ok')
	LOCAL n2
	Local lok := .f.

	For n2 := 1 TO Len( aMe1 )

		SetProperty( '_InputWindow', aMe1[ n2 ][ 1 ], 'Enabled', aMe1[ n2 ][ 2 ]   )

		If aRe1[ n2 ][ 2 ]

			If n2 = Len(aMe1)
				If n2 > 1
					SetMethodCode( '_InputWindow', aMe1[ n2 ][ 1 ], 'LOSTFOCUS', {||  xButFocus()   }    )
					lOk := .t.
				End If
			End If

		End If

	Next

	lOut := .t.

	If (!lOk) .and. ( Len(aMe1) = 1)
		SetMethodCode( '_InputWindow', aMe1[ 1 ][ 1 ], 'LOSTFOCUS', {||  xButFocus()   }    )
	End If

RETURN

Function xButFocus( lCancel  )

	LOCAL nHButton := GetDlgItem(GetFormHandle( '_InputWindow'), 6598)
	LOCAL nHButt2  := GetDlgItem(GetFormHandle( '_InputWindow'), 6599)

	if (lOut)
		SetFocus(nHButton)
	Else
		SetFocus(nHButt2)
	End If

	lOut := .t.

Return




STATIC FUNCTION xIfEmpty()
	// Local SetFocus(GetNextDlgTabItem(GetFormHandle(cForm), nHButton, .F.))

	Local nHButton := GetFocus()
	// *********************
	// msginfo('ok98542---')

	IF Empty( This.Value )
		SetProperty( '_InputWindow', This.Name, 'BackColor', RED )
		PlayBeep()
		// SysWait( .5 )
		yAviso( 'Este campo deve estar Preenchido,' + QUEBRA + 'Para que a consulta possa ser executada. ' + This.name , .f. )
		DoMethod( '_InputWindow', This.Name, 'SetFocus' )

		SetProperty( '_InputWindow', This.Name, 'BackColor', WHITE )

		Return .f.

	ENDIF

RETURN .t.


FUNCTION FormateSql( cSql1, aCabec  )

	LOCAL cSqlx   := ''
	LOCAL n1 := Int( hb_Random( 23455 ) )
	LOCAL cTabela := "tab" + DToS( Date() ) + StrZero( n1, 6 )
	LOCAL cSql := ''
	LOCAL cCabec := ''   // LOCAL n1
	LOCAL oServer := GetConexao()

	FOR n1 := 1 TO Len( aCabec )
		cCabec += "'" + hb_OemToansi(alltrim(aCabec[ n1 ])) + "',"
	NEXT


	cCabec := Left( cCabec, Len( cCabec ) -1 )

	cSql := "drop table if exists " + cTabela + ";"
	oServer:Query( cSql )

	cSql := "SET @row_number:=0; " + Chr( 13 ) + Chr( 10 )
	oServer:Query( cSql )

	cSql := "create table " + cTabela + " as " + Chr( 13 ) + Chr( 10 )
	cSql += cSql1
	oServer:Query( cSql )

	cSql := "insert into "  + cTabela + " values(-5," + cCabec + ");" + Chr( 13 ) + Chr( 10 )
	oServer:Query( cSql )

	hb_MemoWrit( 'saida1.txt', cSql )

RETURN ( cTabela )


PROCEDURE DoFindWin(cTitle)
LOCAL nWin := HMG_CallDLL( "User32.dll", DLL_OSAPI, "FindWindow", 0, cTitle)

   If !EMPTY(nWin)
      HMG_CallDLL( "User32.dll", DLL_OSAPI, "SetForegroundWindow", nWin )
      HMG_CallDLL( "User32.dll", DLL_OSAPI, "BringWindowToTop", nWin )
      HMG_CallDLL( "User32.dll", DLL_OSAPI, "ShowWindow", nWin, 1 )
      HMG_CallDLL( "User32.dll", DLL_OSAPI, "UpdateWindow", nWin )
	  msginfo('ok')
   End If 

RETURN

